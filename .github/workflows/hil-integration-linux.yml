name: "HIL: Linux Integration"

on:
  workflow_dispatch:
    inputs:
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string
  workflow_call:
    inputs:
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string

jobs:
  hil-matrix:
    name: linux-hil-matrix
    runs-on: ubuntu-24.04

    outputs:
      tests: ${{ steps.output-tests.outputs.tests }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare tests matrix
        id: output-tests
        shell: python
        run: |
          import json
          import os
          from pathlib import Path

          tests = [p.name for p in Path('tests/hil/tests').iterdir()]

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
            print('tests=' + json.dumps(tests), file=github_output)

  hil:
    name: linux-hil-tests
    runs-on: ubuntu-24.04
    needs: hil-matrix

    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.hil-matrix.outputs.tests) }}

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          path: .
          submodules: 'recursive'
      - name: Compile
        shell: bash
        run: |
          export EXTRA_BUILD_ARGS=-DCONFIG_GOLIOTH_COAP_HOST_URI=${{ inputs.coap_gateway_url }}

          cmake -B build -S tests/hil/platform/linux \
            $EXTRA_BUILD_ARGS -DGOLIOTH_HIL_TEST=${{ matrix.test }}
          make -j$(nproc) -C build
      - name: Setup Python dependencies
        run: |
          pip install \
            gcovr \
            pytest \
            pytest-timeout \
            tests/hil/scripts/pytest-hil \
            git+https://github.com/golioth/python-golioth-tools@v0.7.0
      - name: Run test
        id: run_test
        shell: bash
        env:
          test: ${{ matrix.test }}
        run: |
          rm -rf summary
          mkdir summary

          rm -rf allure-reports

          pytest --rootdir . tests/hil/tests/$test      \
            --board linux                               \
            --fw-image build/hil                        \
            --api-url ${{ inputs.api-url }}             \
            --api-key ${{ secrets[inputs.api-key-id] }} \
            --mask-secrets                              \
            -rP                                         \
            --timeout=600                               \
            --junitxml=summary/hil-linux-${test}.xml    \
            --alluredir=allure-reports                  \
            --allure-platform linux

      - name: Capture coverage
        if: success() || failure()
        run: |
          gcovr                                                         \
            --gcov-ignore-parse-errors=negative_hits.warn_once_per_file \
            --merge-mode-functions=separate                             \
            --json coverage.json                                        \
            build

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: success() || failure()
        with:
          name: linux-hil-test-coverage-${{ matrix.test }}
          path: |
            coverage.json

      - name: Safe upload CI report summary
        uses: ./.github/actions/safe-upload-artifacts
        if: success() || failure()
        with:
          name: ci-hil-linux-${{ matrix.test }}
          path: summary/hil-linux-*.xml

      - name: Safe upload Allure reports
        if: success() || failure()
        uses: ./.github/actions/safe-upload-artifacts
        with:
          secrets-json: ${{ toJson(secrets) }}
          name: allure-reports-hil-linux-${{ matrix.test }}
          path: allure-reports

  hil-summary:
    name: linux-hil-tests-summary
    runs-on: ubuntu-24.04
    needs: hil
    if: success() || failure()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Collect JUnit reports
        uses: actions/download-artifact@v4
        with:
          pattern: ci-hil-linux-*

      - name: Prepare summary
        shell: bash
        run: |
          if ! command -v sudo; then
            # Self-hosted runner docker images don't have sudo installed
            mkdir -p -m 777 /tmp && apt update && apt install -y xml-twig-tools
          else
            sudo apt install -y xml-twig-tools
          fi

          xml_grep --pretty_print indented \
            --wrap testsuites --descr '' \
            --cond "testsuite" \
            ci-hil-linux-*/*.xml \
            > hil-linux.xml

      - name: Safe upload CI report summary
        uses: ./.github/actions/safe-upload-artifacts
        with:
          name: ci-summary-hil-linux
          path: hil-linux.xml
