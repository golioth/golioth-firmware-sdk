name: Test on Hardware

on:
  push:
    branches: [ main ]
  pull_request:
  schedule:
    # Run workflow at the start of every day (12 AM UTC)
    - cron: "0 0 * * *"

  workflow_dispatch:

jobs:
  build_for_hw_test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.x
        architecture: 'x64'
    - name: Build test project
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.2.1
        target: esp32s3
        path: 'examples/esp_idf/test'
    - name: Create build tarball for serial flashing
      run: |
        cd examples/esp_idf/test
        tar czf build.tar.gz \
            build/flasher_args.json \
            build/bootloader/bootloader.bin \
            build/test.bin \
            build/partition_table/partition-table.bin \
            build/ota_data_initial.bin
    - name: Upload tarball
      uses: actions/upload-artifact@v4
      with:
        name: build.tar.gz
        path: examples/esp_idf/test/build.tar.gz
    - name: Replace version 1.2.3 with 1.2.99
      run: |
        sed -i 's/1.2.3/1.2.99/g' examples/esp_idf/test/main/app_main.c
    - name: Rebuild test project with version 1.2.99
      uses: espressif/esp-idf-ci-action@v1
      with:
        esp_idf_version: v5.2.1
        target: esp32s3
        path: 'examples/esp_idf/test'
    - name: Copy test.bin to test_new.bin
      run: |
        cd examples/esp_idf/test
        cp build/test.bin test_new.bin
    - name: Upload 1.2.99 binary
      uses: actions/upload-artifact@v4
      with:
        name: test_new.bin
        path: examples/esp_idf/test/test_new.bin

  # Assumptions made about the self-hosted runner:
  #
  #  1. Has installed the GitHub Actions self-hosted runner service
  #  2. Has an environment variable defined for the serial port: CI_ESP32S3_DEVKITC_PORT
  #  3. Has credentials defined in the file $HOME/credentials_esp32s3_devkitc.yml
  #
  # It is the responsibility of the self-hosted runner admin to ensure
  # these pre-conditions are met.
  #
  # For item 1, GitHub provides instructions when you add a new self-hosted runner
  # in Settings -> Actions -> Runners.
  #
  # For item 2, this environment variable can be added to $HOME/runner_env.sh:
  #   export CI_ESP32S3_PORT=/dev/ttyUSB0
  #
  # For item 3, the file needs to have contents like:
  #
  # ---
  # settings:
  #   wifi/ssid: mywifissid
  #   wifi/psk: mywifipassword
  #   golioth/psk-id: device@project
  #   golioth/psk: supersecret
  #
  # golioth_api:
  #   api_url: https://api.golioth.dev
  #   project_id: project
  #   device_id: deviceid
  #   api_key: apikey
  # ---
  hw_flash_and_test:
    needs: build_for_hw_test
    runs-on: [is_active, has_esp32s3_devkitc, mikes_orange_pi]

    container:
      image: golioth/golioth-hil-base:e635559
      volumes:
        - /dev:/dev
        - /home/golioth/credentials:/opt/credentials
      options: --privileged

    steps:
    - name: Checkout repository without submodules
      uses: actions/checkout@v4
    - name: Download build tarball
      uses: actions/download-artifact@v4
      with:
        name: build.tar.gz
        path: examples/esp_idf/test
    - name: Untar
      run: |
        cd examples/esp_idf/test
        tar xvf build.tar.gz
    - name: Download 1.2.99 binary
      uses: actions/download-artifact@v4
      with:
        name: test_new.bin
        path: examples/esp_idf/test
    - name: Install python packages
      run: python3 -m pip install esptool requests
    - name: Install goliothctl
      run: |
        echo "deb [trusted=yes] https://repos.golioth.io/apt/ /" | tee /etc/apt/sources.list.d/golioth.list
        mkdir -p /tmp
        apt update -y --allow-insecure-repositories
        apt install goliothctl -y
    - name: Power On USB Hub
      run: python3 /opt/golioth-scripts/usb_hub_power.py on
    - name: Prepare goliothctl secret
      run: |
        mkdir -p ~/.golioth
        echo -n ${{ secrets.GOLIOTHCTL_DEV }} | base64 -d  > ~/.golioth/.goliothctl.yaml
    - name: Copy credentials_esp32s3_devkitc.yml to examples/esp_idf/test
      run: |
        cp /opt/credentials/credentials_esp32s3_devkitc.yml examples/esp_idf/test/credentials.yml
    - name: Create and rollout new 1.2.99 OTA release using goliothctl
      shell: bash
      run: |
        cd examples/esp_idf/test
        export GOLIOTH_API_URL=$(cat credentials.yml | grep api_url | awk '{print $2}')
        export GOLIOTH_PROJECT_ID=$(cat credentials.yml | grep project_id | awk '{print $2}')
        export GOLIOTH_API_KEY=$(cat credentials.yml | grep api_key | awk '{print $2}')
        goliothctl login --apiUrl $GOLIOTH_API_URL --projectId $GOLIOTH_PROJECT_ID --apiKey $GOLIOTH_API_KEY
        goliothctl dfu --apiUrl $GOLIOTH_API_URL --projectId $GOLIOTH_PROJECT_ID release delete --release-tags 1.2.99 || echo "release not found"
        goliothctl dfu --apiUrl $GOLIOTH_API_URL --projectId $GOLIOTH_PROJECT_ID artifact delete 1.2.99 || echo "artifact not found"
        goliothctl dfu --apiUrl $GOLIOTH_API_URL --projectId $GOLIOTH_PROJECT_ID artifact create test_new.bin --version 1.2.99
        goliothctl dfu --apiUrl $GOLIOTH_API_URL --projectId $GOLIOTH_PROJECT_ID release create --tags "esp-idf-legacy-test" --release-tags 1.2.99 --components main@1.2.99 --rollout true
    - name: Flash and Verify Serial Output
      shell: bash
      run: |
        cd examples/esp_idf/test
        source /opt/credentials/runner_env.sh
        python3 flash.py $CI_ESP32S3_DEVKITC_PORT && python3 verify.py $CI_ESP32S3_DEVKITC_PORT
    - name: Erase flash
      if: always()
      shell: bash
      run: |
        source /opt/credentials/runner_env.sh
        esptool.py --port $CI_ESP32S3_DEVKITC_PORT erase_flash
    - name: Power Off USB Hub
      if: always()
      run: python3 /opt/golioth-scripts/usb_hub_power.py off
