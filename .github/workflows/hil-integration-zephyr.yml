name: "HIL: Zephyr Integration"

on:
  workflow_dispatch:
    inputs:
      hil_board:
        required: true
        type: string
      west_board:
        required: true
        type: string
      manifest:
        required: true
        type: string
      binary_name:
        required: true
        type: string
      binary_blob:
        required: false
        type: string
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string
  workflow_call:
    inputs:
      hil_board:
        required: true
        type: string
      west_board:
        required: true
        type: string
      manifest:
        required: true
        type: string
      binary_name:
        required: true
        type: string
      binary_blob:
        required: false
        type: string
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string

jobs:
  matrix:
    name: zephyr-${{ inputs.hil_board }}-matrix
    runs-on: ubuntu-24.04

    outputs:
      tests: ${{ steps.output-tests.outputs.tests }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare tests matrix
        id: output-tests
        shell: python
        run: |
          import json
          import os
          from pathlib import Path

          tests = [p.name for p in Path('tests/hil/tests').iterdir()]

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
            print('tests=' + json.dumps(tests), file=github_output)

  build:
    name: zephyr-${{ inputs.hil_board }}-build (${{ matrix.test }})
    container: golioth/golioth-zephyr-base:0.17.0-SDK-v0
    needs: matrix
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.matrix.outputs.tests) }}
    env:
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk-0.17.0
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          path: modules/lib/golioth-firmware-sdk
          submodules: 'recursive'
      - name: Init and update west
        run: |
          mkdir -p .west
          cat <<EOF > .west/config
          [manifest]
          path = modules/lib/golioth-firmware-sdk
          file = ${{ inputs.manifest }}
          EOF

          west update -o=--depth=1 -n

          uv pip install \
            -r zephyr/scripts/requirements-base.txt \
            -r zephyr/scripts/requirements-build-test.txt \
            -r zephyr/scripts/requirements-run-test.txt

          # Needed for TF-M
          uv pip install \
            cryptography==41.0.7 \
            pyasn1 \
            pyyaml \
            cbor>=1.0.0 \
            imgtool>=1.9.0 \
            jinja2 \
            click

      - name: Download binary blobs
        if: ${{ inputs.binary_blob }}
        run: |
          west blobs fetch ${{ inputs.binary_blob }}

      - name: Compile
        shell: bash
        run: |
          rm -rf test_binaries
          mkdir -p test_binaries

          FW_IMAGE=${{ matrix.test }}.${{ inputs.binary_name }}
          FW_IMAGE=${FW_IMAGE/\//-}

          export EXTRA_BUILD_ARGS=-DCONFIG_GOLIOTH_COAP_HOST_URI=\"${{ inputs.coap_gateway_url }}\"

          west build -p -b ${{ inputs.west_board }} \
            modules/lib/golioth-firmware-sdk/tests/hil/platform/zephyr \
            -- $EXTRA_BUILD_ARGS -DGOLIOTH_HIL_TEST=${{ matrix.test }}
          mv build/${{ inputs.binary_name }} \
            test_binaries/${FW_IMAGE}

      - name: Save artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-hil-zephyr-${{ matrix.test }}
          path: test_binaries/*

  test:
    name: zephyr-${{ inputs.hil_board }}-test (${{ matrix.test }})
    needs:
      - matrix
      - build
    strategy:
      fail-fast: false
      matrix:
        test: ${{ fromJSON(needs.matrix.outputs.tests) }}
    runs-on:
      - is_active
      - has_${{ inputs.hil_board }}
    timeout-minutes: 30

    container:
      image: golioth/golioth-hil-base:2df1570
      volumes:
        - /dev:/dev
        - /home/golioth/credentials:/opt/credentials
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python dependencies
        run: |
          uv pip install \
            pytest \
            pytest-timeout \
            tests/hil/scripts/pytest-hil \
            git+https://github.com/golioth/python-golioth-tools@v0.7.0
      - name: Power On USB Hub
        run: python3 /opt/golioth-scripts/usb_hub_power.py on
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-hil-zephyr-${{ matrix.test }}
          path: .
      - name: Run test
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
        run: |
          rm -rf summary
          mkdir summary
          rm -rf allure-reports
          source /opt/credentials/runner_env.sh
          PORT_VAR=CI_${hil_board^^}_PORT
          SNR_VAR=CI_${hil_board^^}_SNR
          FW_IMAGE=${{ matrix.test }}.${{ inputs.binary_name }}
          FW_IMAGE=${FW_IMAGE/\//-}

          pytest --rootdir . tests/hil/tests/${{ matrix.test }}                          \
            --board ${hil_board}                                                         \
            --port ${!PORT_VAR}                                                          \
            --fw-image ${FW_IMAGE}                                                       \
            --serial-number ${!SNR_VAR}                                                  \
            --api-url ${{ inputs.api-url }}                                              \
            --api-key ${{ secrets[inputs.api-key-id] }}                                  \
            --wifi-ssid ${{ secrets[format('{0}_WIFI_SSID', runner.name)] }}             \
            --wifi-psk ${{ secrets[format('{0}_WIFI_PSK', runner.name)] }}               \
            --mask-secrets                                                               \
            --timeout=600                                                                \
            --junitxml=summary/hil-zephyr-${{ inputs.hil_board }}-${{ matrix.test }}.xml \
            --alluredir=allure-reports                                                   \
            --allure-platform zephyr                                                     \
            --runner-name ${{ runner.name }}

      - name: Safe upload CI report summary
        uses: ./.github/actions/safe-upload-artifacts
        if: success() || failure()
        with:
          name: ci-individual-hil-zephyr-${{ inputs.hil_board }}-${{ matrix.test }}
          path: summary/*.xml

      - name: Safe upload Allure reports
        if: success() || failure()
        uses: ./.github/actions/safe-upload-artifacts
        with:
          secrets-json: ${{ toJson(secrets) }}
          name: allure-reports-hil-zephyr-${{ inputs.hil_board }}-${{ matrix.test }}
          path: allure-reports

      - name: Erase flash
        if: always()
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
        run: |
          source /opt/credentials/runner_env.sh
          export PATH=$PATH:/opt/SEGGER/JLink
          SNR_VAR=CI_${hil_board^^}_SNR
          PORT_VAR=CI_${hil_board^^}_PORT
          cat <<EOF > erase_frdm_rw612.jlink
          r
          h
          exec EnableEraseAllFlashBanks
          erase 0x8000000 0x8624000
          sleep 30
          r
          sleep 3
          q
          EOF

          if [[ "${hil_board}" == "nrf9160dk" ]] || [[ "${hil_board}" == "nrf52840dk" ]]; then
            nrfjprog --recover --snr ${!SNR_VAR}

          elif [[ "${hil_board}" == "esp32_devkitc_wrover" ]]; then
            esptool.py --port ${!PORT_VAR} erase_flash

          elif [[ "${hil_board}" == "frdm_rw612" ]]; then
            JLinkExe \
              -nogui 1 \
              -if swd \
              -speed auto \
              -device RW612 \
              -CommanderScript erase_frdm_rw612.jlink \
              -SelectEmuBySN ${!SNR_VAR}

          elif [[ "${hil_board}" == "rak5010" ]]; then
            gdb \
            -ex "set confirm off" \
            -ex "target extended-remote "${CI_BLACKMAGICPROBE_PORT} \
            -ex "monitor swdp_scan" \
            -ex "attach 1" \
            -ex "monitor erase_mass" \
            -ex "kill" \
            -ex "quit" \
            -silent

          fi
      - name: Power Off USB Hub
        if: always()
        run: python3 /opt/golioth-scripts/usb_hub_power.py off

  summary:
    name: zephyr-${{ inputs.hil_board }}-summary
    runs-on: ubuntu-24.04
    needs: test
    if: success() || failure()

    steps:
      - name: Collect JUnit reports
        uses: actions/download-artifact@v4
        with:
          path: summary
          pattern: ci-individual-hil-zephyr-${{ inputs.hil_board }}-*
          merge-multiple: true

      - name: Prepare CI report summary
        shell: bash
        run: |
          sudo apt install -y xml-twig-tools

          xml_grep \
            --pretty_print indented \
            --wrap testsuites \
            --descr '' \
            --cond "testsuite" \
            summary/*.xml \
            > summary/hil-zephyr-${{ inputs.hil_board }}.xml

      - name: Upload CI report summary
        uses: actions/upload-artifact@v4
        with:
          name: ci-summary-hil-zephyr-${{ inputs.hil_board }}
          path: summary/hil-zephyr-${{ inputs.hil_board }}.xml
