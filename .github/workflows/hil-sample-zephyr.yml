name: "HIL: Zephyr Samples"

on:
  workflow_dispatch:
    inputs:
      hil_board:
        required: true
        type: string
      west_board:
        required: true
        type: string
      manifest:
        required: true
        type: string
      binary_blob:
        required: false
        type: string
      run_tests:
        required: false
        type: boolean
        default: true
      extra_twister_args:
        required: false
        type: string
        default: '--west-flash="--dev-id=${!SNR_VAR}"'
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string
  workflow_call:
    inputs:
      hil_board:
        required: true
        type: string
      west_board:
        required: true
        type: string
      manifest:
        required: true
        type: string
      binary_blob:
        required: false
        type: string
      run_tests:
        required: false
        type: boolean
        default: true
      extra_twister_args:
        required: false
        type: string
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string

jobs:
  build:
    name: zephyr-${{ inputs.hil_board }}-twister-build
    container: golioth/golioth-zephyr-base:0.17.0-SDK-v0
    env:
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk-0.17.0
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          path: modules/lib/golioth-firmware-sdk
          submodules: 'recursive'
      - name: Init and update west
        run: |
          mkdir -p .west
          cat <<EOF > .west/config
          [manifest]
          path = modules/lib/golioth-firmware-sdk
          file = ${{ inputs.manifest }}
          EOF

          west update -o=--depth=1 -n

          # Patch but only for Zephyr (patch will fail on NCS builds)
          if west config manifest.file | grep -q '.ci-west-zephyr.yml'; then
            git config --global user.email user@git-scm.com
            git config --global user.name "Git User"
          fi

          uv pip install \
            -r zephyr/scripts/requirements-base.txt \
            -r zephyr/scripts/requirements-build-test.txt \
            -r zephyr/scripts/requirements-run-test.txt

          # Needed for TF-M
          uv pip install \
            cryptography==41.0.7 \
            pyasn1 \
            pyyaml \
            cbor>=1.0.0 \
            imgtool>=1.9.0 \
            jinja2 \
            click

      - name: Download binary blobs
        if: ${{ inputs.binary_blob }}
        run: |
          west blobs fetch ${{ inputs.binary_blob }}

      - name: Compile Tests
        run: |
          export EXTRA_BUILD_ARGS=-x=CONFIG_GOLIOTH_COAP_HOST_URI=\"${{ inputs.coap_gateway_url }}\"

          # Build
          zephyr/scripts/twister                                                \
                -v                                                              \
                --overflow-as-errors                                            \
                --platform ${{ inputs.west_board }}                             \
                -T modules/lib/golioth-firmware-sdk/examples/zephyr             \
                --build-only                                                    \
                $EXTRA_BUILD_ARGS

          # Save lfs.hex, which otherwise is cleaned up by twister with
          # --prep-artifacts-for-testing
          extra_files=$(find twister-out -name lfs.hex)

          if [ "$extra_files" != "" ]; then
              tar -cf extra_files.tar $extra_files
          fi

          # Reuse build directory and cleanup artifacts for testing
          zephyr/scripts/twister                                                \
                -n                                                              \
                -v                                                              \
                --overflow-as-errors                                            \
                --platform ${{ inputs.west_board }}                             \
                -T modules/lib/golioth-firmware-sdk/examples/zephyr             \
                --prep-artifacts-for-testing                                    \
                $EXTRA_BUILD_ARGS

          # Re-add lfx.hex files
          if [ "$extra_files" != "" ]; then
              tar -xf extra_files.tar
          fi

          # Package for testing
          tar -cjf test_artifacts_${{ inputs.hil_board }}.tar twister-out

      - name: Save artifacts
        if: success() || failure()
        uses: actions/upload-artifact@v4
        with:
          name: test_artifacts_${{ inputs.hil_board }}
          path: test_artifacts_${{ inputs.hil_board }}.tar

  test:
    name: zephyr-${{ inputs.hil_board }}-twister-run
    if: ${{ inputs.run_tests && !cancelled() }}
    needs: build
    runs-on:
      - is_active
      - has_${{ inputs.hil_board }}
    timeout-minutes: 30

    container:
      image: golioth/golioth-twister-base:2ddffa5
      env:
        ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk-0.17.0
      volumes:
        - /dev:/dev
        - /home/golioth/credentials:/opt/credentials
      options: --privileged

    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          path: modules/lib/golioth-firmware-sdk
      - name: Init and update west
        run: |
          rm -rf zephyr

          MANIFEST=${{ inputs.manifest }}
          MANIFEST_TWISTER=${MANIFEST%.yml}-twister.yml

          mkdir -p .west
          cat <<EOF > .west/config
          [manifest]
          path = modules/lib/golioth-firmware-sdk
          file = ${MANIFEST_TWISTER}
          EOF

          west update -o=--depth=1 -n
          git config --global user.email user@git-scm.com
          git config --global user.name "Git User"

          uv pip install \
            -r zephyr/scripts/requirements-base.txt \
            -r zephyr/scripts/requirements-build-test.txt \
            -r zephyr/scripts/requirements-run-test.txt \
            tests/hil/scripts/pytest-zephyr-samples \
            git+https://github.com/golioth/python-golioth-tools@v0.7.0
      - name: Power On USB Hub
        run: python3 /opt/golioth-scripts/usb_hub_power.py on
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: test_artifacts_${{ inputs.hil_board }}
          path: .
      - name: Extract artifacts
        run: |
          rm -rf twister-out
          tar -xvf test_artifacts_${{ inputs.hil_board }}.tar
      - name: Run test
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
        run: |
          rm -rf allure-reports
          source /opt/credentials/runner_env.sh
          export PATH=$PATH:/opt/SEGGER/JLink
          export PATH=$PATH:/usr/local/go/bin
          export PATH=$PATH:$(go env GOPATH)/bin
          PORT_VAR=CI_${hil_board^^}_PORT
          SNR_VAR=CI_${hil_board^^}_SNR
          zephyr/scripts/twister                                                                  \
                -v                                                                                \
                -p ${{ inputs.west_board }}                                                       \
                -T modules/lib/golioth-firmware-sdk/examples/zephyr                               \
                --device-testing                                                                  \
                --device-serial ${!PORT_VAR}                                                      \
                --test-only                                                                       \
                ${{ inputs.extra_twister_args }}                                                  \
                --pytest-args="--api-url=${{ inputs.api-url }}"                                   \
                --pytest-args="--api-key=${{ secrets[inputs.api-key-id] }}"                       \
                --pytest-args="--wifi-ssid=${{ secrets[format('{0}_WIFI_SSID', runner.name)] }}"  \
                --pytest-args="--wifi-psk=${{ secrets[format('{0}_WIFI_PSK', runner.name)] }}"    \
                --pytest-args="--mask-secrets"                                                    \
                --pytest-args="--alluredir=allure-reports"                                        \
                --pytest-args="--runner-name=${{ runner.name }}"                                  \
                --pytest-args="--hil-board=${{ inputs.hil_board }}"

      - name: Safe upload twister artifacts
        if: success() || failure()
        uses: ./modules/lib/golioth-firmware-sdk/.github/actions/safe-upload-artifacts
        with:
          secrets-json: ${{ toJson(secrets) }}
          name: twister-run-artifacts-${{ inputs.hil_board }}
          path: |
            reports/*
            twister-out/**/*.log
            twister-out/**/report.xml
            twister-out/*.xml
            twister-out/*.json

      - name: Prepare CI report summary
        if: success() || failure()
        run: |
          rm -rf summary
          mkdir summary
          cp twister-out/twister_suite_report.xml summary/samples-zephyr-${{ inputs.hil_board }}.xml

      - name: Safe upload CI report summary
        uses: ./modules/lib/golioth-firmware-sdk/.github/actions/safe-upload-artifacts
        if: success() || failure()
        with:
          name: ci-summary-samples-zephyr-${{ inputs.hil_board }}
          path: summary/*

      - name: Safe upload Allure reports
        if: success() || failure()
        uses: ./modules/lib/golioth-firmware-sdk/.github/actions/safe-upload-artifacts
        with:
          secrets-json: ${{ toJson(secrets) }}
          name: allure-reports-samples-zephyr-${{ inputs.hil_board }}
          path: allure-reports

      - name: Erase flash
        if: always()
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
        run: |
          source /opt/credentials/runner_env.sh
          export PATH=$PATH:/opt/SEGGER/JLink
          SNR_VAR=CI_${hil_board^^}_SNR
          PORT_VAR=CI_${hil_board^^}_PORT
          cat <<EOF > erase_frdm_rw612.jlink
          r
          h
          exec EnableEraseAllFlashBanks
          erase 0x8000000 0x8624000
          sleep 30
          r
          sleep 3
          q
          EOF

          if [[ "${hil_board}" == "nrf9160dk" ]] || [[ "${hil_board}" == "nrf52840dk" ]]; then
            nrfjprog --recover --snr ${!SNR_VAR}

          elif [[ "${hil_board}" == "esp32_devkitc_wrover" ]]; then
            esptool.py --port ${!PORT_VAR} erase_flash

          elif [[ "${hil_board}" == "frdm_rw612" ]]; then
            JLinkExe \
              -nogui 1 \
              -if swd \
              -speed auto \
              -device RW612 \
              -CommanderScript erase_frdm_rw612.jlink \
              -SelectEmuBySN ${!SNR_VAR}

          elif [[ "${hil_board}" == "rak5010" ]]; then
            gdb \
            -ex "set confirm off" \
            -ex "target extended-remote "${CI_BLACKMAGICPROBE_PORT} \
            -ex "monitor swdp_scan" \
            -ex "attach 1" \
            -ex "monitor erase_mass" \
            -ex "kill" \
            -ex "quit" \
            -silent

          fi
      - name: Power Off USB Hub
        if: always()
        run: python3 /opt/golioth-scripts/usb_hub_power.py off
