name: Hardware-in-the-Loop Tests

on:
  workflow_dispatch:
    inputs:
      api-url:
        description: "API gateway URL for Golioth backend services"
        required: false
        default: "https://api.golioth.io"
      api-key-id:
        description: "Name of GitHub secret containing an API key that will be used to authenticate with the Golioth backend"
        required: false
        default: "PROD_CI_PROJECT_API_KEY"
      coap_gateway_url:
        description: "The CoAP gateway URL to be hardcoded into test firmware"
        required: false
        default: "coaps://coap.golioth.io"
      workflow:
        description: "Select which workflow to run"
        required: false
        type: choice
        default: 'all'
        options:
          - all
          - zephyr_integration
          - zephyr_sample
          - zephyr_sample_native_sim
          - esp_idf_integration
          - esp_idf_sample
          - linux_integration
  workflow_call:
    inputs:
      api-url:
        description: "API gateway URL for Golioth backend services"
        required: false
        type: string
        default: "https://api.golioth.io"
      api-key-id:
        description: "Name of GitHub secret containing an API key that will be used to authenticate with the Golioth backend"
        required: false
        type: string
        default: "PROD_CI_PROJECT_API_KEY"
      coap_gateway_url:
        description: "The CoAP gateway URL to be hardcoded into test firmware"
        required: false
        type: string
        default: "coaps://coap.golioth.io"
      workflow:
        description: "Select which workflow to run"
        required: false
        type: string
        default: 'all'

jobs:
  hil_test_zephyr:
    if: ${{ inputs.workflow == 'all' || inputs.workflow == 'zephyr_integration' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - hil_board: esp32_devkitc_wrover
            west_board: esp32_devkitc_wrover/esp32/procpu
            manifest: .ci-west-zephyr.yml
            binary_name: zephyr.bin
            binary_blob: hal_espressif
          - hil_board: mimxrt1024_evk
            west_board: mimxrt1024_evk
            manifest: .ci-west-zephyr.yml
            binary_name: zephyr.hex
          - hil_board: nrf52840dk
            west_board: nrf52840dk/nrf52840
            manifest: .ci-west-zephyr.yml
            binary_name: zephyr.hex
          - hil_board: nrf9160dk
            west_board: nrf9160dk/nrf9160/ns
            manifest: .ci-west-ncs.yml
            binary_name: merged.hex
    uses: ./.github/workflows/hil_test_zephyr.yml
    with:
      hil_board: ${{ matrix.hil_board }}
      west_board: ${{ matrix.west_board }}
      manifest: ${{ matrix.manifest }}
      binary_name: ${{ matrix.binary_name}}
      binary_blob: ${{ matrix.binary_blob }}
      api-url: ${{ inputs.api-url }}
      api-key-id: ${{ inputs.api-key-id }}
      coap_gateway_url: ${{ inputs.coap_gateway_url }}
    secrets: inherit

  hil_test_esp-idf:
    if: ${{ inputs.workflow == 'all' || inputs.workflow == 'esp_idf_integration' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - hil_board: esp32s3_devkitc
            idf_target: esp32s3
          - hil_board: esp32_devkitc_wrover
            idf_target: esp32
          - hil_board: esp32c3_devkitm
            idf_target: esp32c3
    uses: ./.github/workflows/hil_test_esp-idf.yml
    with:
      hil_board: ${{ matrix.hil_board }}
      idf_target: ${{ matrix.idf_target }}
      api-url: ${{ inputs.api-url }}
      api-key-id: ${{ inputs.api-key-id }}
      coap_gateway_url: ${{ inputs.coap_gateway_url }}
    secrets: inherit

  hil_test_linux:
    if: ${{ inputs.workflow == 'all' || inputs.workflow == 'linux_integration' }}
    uses: ./.github/workflows/hil_test_linux.yml
    with:
      api-url: ${{ inputs.api-url }}
      api-key-id: ${{ inputs.api-key-id }}
      coap_gateway_url: ${{ inputs.coap_gateway_url }}
    secrets: inherit

  hil_sample_zephyr:
    if: ${{ inputs.workflow == 'all' || inputs.workflow == 'zephyr_sample' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - hil_board: esp32_devkitc_wrover
            west_board: esp32_devkitc_wrover/esp32/procpu
            manifest: .ci-west-zephyr.yml
            extra_twister_args: '--flash-before --west-flash=--esp-tool=$(which esptool.py),--esp-device=${!PORT_VAR}'
            binary_blob: hal_espressif
            run_tests: true

          - hil_board: mimxrt1024_evk
            west_board: mimxrt1024_evk
            manifest: .ci-west-zephyr.yml
            extra_twister_args: '--west-flash="--dev-id=${!SNR_VAR}"'
            run_tests: true

          - hil_board: nrf52840dk
            west_board: nrf52840dk/nrf52840
            manifest: .ci-west-zephyr.yml
            extra_twister_args: '--west-flash="--dev-id=${!SNR_VAR}"'
            run_tests: true

          - hil_board: nrf9160dk
            west_board: nrf9160dk/nrf9160/ns
            manifest: .ci-west-ncs.yml
            extra_twister_args: '--west-flash="--dev-id=${!SNR_VAR}"'
            run_tests: true

          - hil_board: rak5010
            west_board: rak5010/nrf52840
            manifest: .ci-west-zephyr.yml
            extra_twister_args: '--flash-before --west-flash=--gdb=/usr/bin/gdb --west-runner blackmagicprobe'
            run_tests: true

          - hil_board: qemu_x86
            west_board: qemu_x86
            manifest: .ci-west-zephyr.yml
            run_tests: false
    uses: ./.github/workflows/hil_sample_zephyr.yml
    with:
      hil_board: ${{ matrix.hil_board }}
      west_board: ${{ matrix.west_board }}
      manifest: ${{ matrix.manifest }}
      binary_blob: ${{ matrix.binary_blob }}
      run_tests: ${{ matrix.run_tests }}
      extra_twister_args: ${{ matrix.extra_twister_args }}
      api-url: ${{ inputs.api-url }}
      api-key-id: ${{ inputs.api-key-id }}
      coap_gateway_url: ${{ inputs.coap_gateway_url }}
    secrets: inherit

  hil_sample_zephyr_nsim:
    if: ${{ inputs.workflow == 'all' || inputs.workflow == 'zephyr_sample_native_sim' }}
    runs-on: ubuntu-latest
    container:
      image: golioth/golioth-zephyr-base:0.16.3-SDK-v0
    env:
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk-0.16.3
    name: zephyr-${{ matrix.west_board }}-twister
    strategy:
      fail-fast: false
      matrix:
        include:
          - west_board: native_sim
            artifact_suffix: native_sim_32
          - west_board: native_sim/native/64
            artifact_suffix: native_sim_64
    steps:
      - name: Checkout repository and submodules
        uses: actions/checkout@v4
        with:
          path: modules/lib/golioth-firmware-sdk
          submodules: 'recursive'

      - name: Init and update west
        run: |
          mkdir -p .west
          cat <<EOF > .west/config
          [manifest]
          path = modules/lib/golioth-firmware-sdk
          file = .ci-west-zephyr.yml
          EOF

          west update -o=--depth=1 -n
          git config --global user.email user@git-scm.com
          git config --global user.name "Git User"
          west patch

          pip3 install -r zephyr/scripts/requirements-base.txt
          pip3 install -r zephyr/scripts/requirements-build-test.txt
          pip3 install -r zephyr/scripts/requirements-run-test.txt

          pip3 install modules/lib/golioth-firmware-sdk/tests/hil/scripts/pytest-zephyr-samples
          pip3 install git+https://github.com/golioth/python-golioth-tools@v0.6.3

      - name: Run tests
        run: |
          rm -rf allure-reports
          zephyr/scripts/twister                                                    \
              --platform ${{ matrix.west_board }}                                   \
              -T modules/lib/golioth-firmware-sdk/examples/zephyr                   \
              -C --coverage-basedir modules/lib/golioth-firmware-sdk                \
              --coverage-formats txt,html                                           \
              -x=CONFIG_GOLIOTH_COAP_HOST_URI=\"${{ inputs.coap_gateway_url }}\"    \
              --pytest-args="--api-url=${{ inputs.api-url }}"                       \
              --pytest-args="--api-key=${{ secrets[inputs.api-key-id] }}"           \
              --pytest-args="--mask-secrets"                                        \
              --pytest-args="--alluredir=allure-reports"                            \
              --pytest-args="--runner-name=${{ runner.name }}"                      \
              --pytest-args="--hil-board=${{ matrix.artifact_suffix }}"

      - name: Safe upload twister artifacts
        id: safe-upload-artifacts
        if: always()
        uses: ./modules/lib/golioth-firmware-sdk/.github/actions/safe-upload-artifacts
        with:
          secrets-json: ${{ toJson(secrets) }}
          name: twister-run-artifacts-${{ matrix.artifact_suffix }}
          path: |
            reports/*
            twister-out/coverage.json
            twister-out/coverage/*
            twister-out/**/*.log
            twister-out/**/report.xml
            twister-out/*.xml
            twister-out/*.json

      - name: Prepare CI report summary
        if: always()
        run: |
          rm -rf summary
          mkdir summary
          cp twister-out/twister_suite_report.xml summary/samples-zephyr-${{ matrix.artifact_suffix }}.xml

      - name: Safe upload CI report summary
        uses: ./modules/lib/golioth-firmware-sdk/.github/actions/safe-upload-artifacts
        if: always()
        with:
          name: ci-summary-samples-zephyr-${{ matrix.artifact_suffix }}
          path: summary/*

      - name: Upload Allure reports
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: allure-reports-samples-zephyr-${{ matrix.artifact_suffix }}
          path: allure-reports
          retention-days: 1

  hil_sample_zephyr_nsim_coverage:
    runs-on: ubuntu-latest
    needs: hil_sample_zephyr_nsim
    name: zephyr-coverage
    steps:
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: twister-run-artifacts-native*

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.x

      - name: Install gcovr
        shell: bash
        run: |
          pip install gcovr

      - name: Merge coverage
        shell: bash
        run: |
          tracefiles=$(for d in twister-run-artifacts-*; do
            printf -- "--add-tracefile $d/twister-out/coverage.json "
          done)

          shopt -s expand_aliases

          alias gcovr="gcovr \
            $tracefiles \
            -e examples -e external"

          gcovr --txt-summary --xml coverage.xml

      - name: Coverage report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          format: markdown
          badge: true
          output: file
          hide_complexity: true

      - name: Coverage summary
        shell: bash
        run: |
          cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

      - name: Append Coverage PR Comment title
        shell: bash
        run: |
          echo "# Code Coverage (Zephyr)" > code-coverage-comment.md
          cat code-coverage-results.md >> code-coverage-comment.md

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          path: code-coverage-comment.md

  hil_sample_esp-idf:
    if: ${{ inputs.workflow == 'all' || inputs.workflow == 'esp_idf_sample' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - hil_board: esp32s3_devkitc
            idf_target: esp32s3
          - hil_board: esp32_devkitc_wrover
            idf_target: esp32
          - hil_board: esp32c3_devkitm
            idf_target: esp32c3
    uses: ./.github/workflows/hil_sample_esp-idf.yml
    with:
      hil_board: ${{ matrix.hil_board }}
      idf_target: ${{ matrix.idf_target }}
      api-url: ${{ inputs.api-url }}
      api-key-id: ${{ inputs.api-key-id }}
      coap_gateway_url: ${{ inputs.coap_gateway_url }}
    secrets: inherit

  merge_reports:
    runs-on: ubuntu-latest
    needs:
      - hil_sample_esp-idf
      - hil_sample_zephyr
      - hil_sample_zephyr_nsim
      - hil_test_esp-idf
      - hil_test_linux
      - hil_test_zephyr

    if: ${{ always() }}
    steps:
    - name: Gather reports
      uses: actions/download-artifact@v4
      with:
        path: allure-reports
        pattern: allure-reports-*
        merge-multiple: true

    - name: Upload reports
      uses: actions/upload-artifact@v4
      with:
        name: allure-reports-alltest
        path: allure-reports

  publish_summary:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - hil_sample_zephyr
      - hil_sample_zephyr_nsim

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Gather summaries
      uses: actions/download-artifact@v4
      with:
        path: summary
        pattern: ci-summary-*
        merge-multiple: true

    - name: Test Report
      uses: phoenix-actions/test-reporting@v15
      if: success() || failure()
      with:
        name: HIL Test Summary
        path: summary/*.xml
        reporter: java-junit
