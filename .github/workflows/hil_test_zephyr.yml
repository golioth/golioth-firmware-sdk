name: Zephyr Hardware-in-the-Loop Tests

on:
  workflow_call:
    inputs:
      hil_board:
        required: true
        type: string
      west_board:
        required: true
        type: string
      manifest:
        required: true
        type: string
      binary_name:
        required: true
        type: string
      binary_blob:
        required: false
        type: string
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string

jobs:
  build:
    name: zephyr-${{ inputs.hil_board }}-build
    container: golioth/golioth-zephyr-base:0.16.3-SDK-v0
    env:
      ZEPHYR_SDK_INSTALL_DIR: /opt/toolchains/zephyr-sdk-0.16.3
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        path: modules/lib/golioth-firmware-sdk
        submodules: 'recursive'
    - name: Init and update west
      run: |
        mkdir -p .west
        cat <<EOF > .west/config
        [manifest]
        path = modules/lib/golioth-firmware-sdk
        file = ${{ inputs.manifest }}
        EOF

        west update -o=--depth=1 -n

        pip3 install -r zephyr/scripts/requirements-base.txt
        pip3 install -r zephyr/scripts/requirements-build-test.txt
        pip3 install -r zephyr/scripts/requirements-run-test.txt
        # Needed for TF-M
        pip3 install cryptography==41.0.7 pyasn1 pyyaml cbor>=1.0.0 imgtool>=1.9.0 jinja2 click

    - name: Download binary blobs
      if: ${{ inputs.binary_blob }}
      run: |
        west blobs fetch ${{ inputs.binary_blob }}

    - name: Compile
      shell: bash
      run: |
        rm -rf test_binaries
        mkdir -p test_binaries

        export EXTRA_BUILD_ARGS=-DCONFIG_GOLIOTH_COAP_HOST_URI=\"${{ inputs.coap_gateway_url }}\"

        for test in `ls modules/lib/golioth-firmware-sdk/tests/hil/tests`
        do
          west build -p -b ${{ inputs.west_board }} modules/lib/golioth-firmware-sdk/tests/hil/platform/zephyr -- $EXTRA_BUILD_ARGS -DGOLIOTH_HIL_TEST=$test
          mv build/zephyr/${{ inputs.binary_name }} test_binaries/${test}-${{ inputs.binary_name }}
        done
    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.hil_board }}-hil-zephyr
        path: test_binaries/*

  test:
    name: zephyr-${{ inputs.hil_board }}-test
    needs: build
    runs-on: [ is_active, "has_${{ inputs.hil_board }}" ]

    container:
      image: golioth/golioth-hil-base:af8e4f5
      volumes:
        - /dev:/dev
        - /home/golioth/credentials:/opt/credentials
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python dependencies
        run: |
          pip install pytest pytest-timeout
          pip install tests/hil/scripts/pytest-hil
          pip install git+https://github.com/golioth/python-golioth-tools@v0.6.0
      - name: Power Cycle USB Hub
        run: /opt/golioth-scripts/power-cycle-usb-hub.sh
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-hil-zephyr
          path: .
      - name: Run test
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
        run: |
          source /opt/credentials/runner_env.sh
          PORT_VAR=CI_${hil_board^^}_PORT
          SNR_VAR=CI_${hil_board^^}_SNR
          for test in `ls tests/hil/tests`
          do
            pytest --rootdir . tests/hil/tests/$test                            \
              --board ${hil_board}                                              \
              --port ${!PORT_VAR}                                               \
              --fw-image ${test}-${{ inputs.binary_name }}                      \
              --serial-number ${!SNR_VAR}                                       \
              --api-url ${{ inputs.api-url }}                                   \
              --api-key ${{ secrets[inputs.api-key-id] }}                       \
              --wifi-ssid ${{ secrets[format('{0}_WIFI_SSID', runner.name)] }}  \
              --wifi-psk ${{ secrets[format('{0}_WIFI_PSK', runner.name)] }}    \
              --timeout=600
          done
