name: "HIL: ESP-IDF Samples"

on:
  workflow_dispatch:
    inputs:
      hil_board:
        required: true
        type: string
      idf_target:
        required: true
        type: string
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string
      ci_project_name:
        description: "The name of the Golioth Project to use for certificate generation"
        required: false
        type: string
        default: "firmware_ci"
  workflow_call:
    inputs:
      hil_board:
        required: true
        type: string
      idf_target:
        required: true
        type: string
      api-url:
        required: true
        type: string
      api-key-id:
        required: true
        type: string
      coap_gateway_url:
        required: true
        type: string
      ci_project_name:
        description: "The name of the Golioth Project to use for certificate generation"
        required: false
        type: string
        default: "firmware_ci"

jobs:
  rand_name:
    runs-on: ubuntu-24.04
    name: esp-idf-device-name

    outputs:
      device_name: ${{ steps.generate-name.outputs.device_name }}

    steps:
      - name: Generate device name
        id: generate-name
        shell: python
        run: |
          import random
          import os
          import string

          random_string = ''.join(random.choice(string.ascii_lowercase + string.digits)
                                  for _ in range(16))

          device_name = f'esp-idf-{random_string}'
          print(f"Device name is: {device_name}")

          with open(os.environ['GITHUB_OUTPUT'], 'a') as github_output:
            print(f'device_name={device_name}', file=github_output)

  build:
    name: esp-idf-${{ inputs.hil_board }}-sample-build
    runs-on: ubuntu-24.04
    needs: rand_name
    steps:
      - name: Checkout Repository and Submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Prep for build
        id: build_prep
        run: |
          rm -rf test_binaries
          mkdir test_binaries
          echo sample_list=$(find examples/esp_idf -type d -name pytest -exec dirname "{}" \;) \
            >> "$GITHUB_OUTPUT"

      - name: Generate certificates
        env:
          DEVICE_NAME: ${{ needs.rand_name.outputs.device_name }}
        shell: bash
        run: |
          scripts/certificates/generate_root_certificate.sh
          scripts/certificates/generate_device_certificate.sh "${{ inputs.ci_project_name }}" \
            "$DEVICE_NAME" pem

          mkdir examples/esp_idf/certificate_auth/main/certs
          mv golioth.crt.pem test_binaries/.
          rm golioth.key.pem
          mv *.crt.pem examples/esp_idf/certificate_auth/main/certs/client.crt.pem
          mv *.key.pem examples/esp_idf/certificate_auth/main/certs/client.key.pem

      - name: Build Samples
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: v5.4.1
          target: ${{ inputs.idf_target }}
          command: |
            for sample in ${{ steps.build_prep.outputs.sample_list }};
            do
              echo CONFIG_GOLIOTH_COAP_HOST_URI=\"${{ inputs.coap_gateway_url }}\" \
                >> ${sample}/sdkconfig.defaults && \
              idf.py -C $sample build && \
              mv ${sample}/build/merged.bin test_binaries/$(basename $sample).bin
            done

      - name: Save Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-sample-esp-idf
          path: test_binaries/*

  test:
    name: esp-idf-${{ inputs.hil_board }}-sample-test
    needs:
      - build
      - rand_name
    runs-on:
      - is_active
      - has_${{ inputs.hil_board }}
    timeout-minutes: 30

    container:
      image: golioth/golioth-hil-base:2df1570
      volumes:
        - /dev:/dev
        - /home/golioth/credentials:/opt/credentials
      options: --privileged

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Python dependencies
        run: |
          uv pip install \
            pytest \
            pytest-timeout \
            tests/hil/scripts/pytest-hil \
            git+https://github.com/golioth/python-golioth-tools@v0.7.0
      - name: Power On USB Hub
        run: python3 /opt/golioth-scripts/usb_hub_power.py on
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.hil_board }}-sample-esp-idf
          path: .
      - name: Run test
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
          GOLIOTH_DEVICE_CERT_NAME: ${{ needs.rand_name.outputs.device_name }}
          GOLIOTH_ROOT_CERTIFICATE: "golioth.crt.pem"
        run: |
          rm -rf allure-reports
          source /opt/credentials/runner_env.sh
          PORT_VAR=CI_${hil_board^^}_PORT
          for sample in $(find examples/esp_idf -type d -name pytest -exec dirname "{}" \;)
          do
            pytest --rootdir . $sample/pytest                                   \
              --board ${{ inputs.hil_board }}_espidf                            \
              --port ${!PORT_VAR}                                               \
              --fw-image $(basename $sample).bin                                \
              --api-url ${{ inputs.api-url }}                                   \
              --api-key ${{ secrets[inputs.api-key-id] }}                       \
              --wifi-ssid ${{ secrets[format('{0}_WIFI_SSID', runner.name)] }}  \
              --wifi-psk ${{ secrets[format('{0}_WIFI_PSK', runner.name)] }}    \
              --mask-secrets                                                    \
              --timeout=600                                                     \
              --alluredir=allure-reports                                        \
              --allure-platform=esp-idf                                         \
              --runner-name ${{ runner.name }}                                  \
              --custom-suitename=sample                                         \
              || EXITCODE=$?
          done
          exit $EXITCODE

      - name: Safe upload Allure reports
        if: success() || failure()
        uses: ./.github/actions/safe-upload-artifacts
        with:
          secrets-json: ${{ toJson(secrets) }}
          name: allure-reports-samples-espidf-${{ inputs.hil_board }}
          path: allure-reports

      - name: Erase flash
        if: always()
        shell: bash
        env:
          hil_board: ${{ inputs.hil_board }}
        run: |
          source /opt/credentials/runner_env.sh
          PORT_VAR=CI_${hil_board^^}_PORT
          esptool.py --port ${!PORT_VAR} erase_flash
      - name: Power Off USB Hub
        if: always()
        run: python3 /opt/golioth-scripts/usb_hub_power.py off
