# Copyright (c) 2023 Golioth, Inc.
# SPDX-License-Identifier: Apache-2.0

module = GOLIOTH
module-str = Golioth

menuconfig GOLIOTH_FIRMWARE_SDK
	bool "Golioth Firmware SDK"
	select COAP
	select ZVFS_EVENTFD
	select REBOOT if BOOTLOADER_MCUBOOT
	select REQUIRES_FULL_LIBC
	select MBEDTLS
	select MBEDTLS_DTLS if MBEDTLS_BUILTIN
	select MBEDTLS_TLS_LIBRARY if NRF_SECURITY
	select MBEDTLS_SSL_PROTO_DTLS if NRF_SECURITY
	select MBEDTLS_SSL_EXTENDED_MASTER_SECRET
	select NET_SOCKETS
	select NET_UDP
	select ZCBOR
	imply DNS_RESOLVER if NET_NATIVE
	imply NET_SOCKETS_SOCKOPT_TLS
	imply NET_SOCKETS_ENABLE_DTLS
	help
	  Enable library for communication with Golioth cloud.

if GOLIOTH_FIRMWARE_SDK

source "${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/src/Kconfig"

menu "Authentication"

source "${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/src/Kconfig.authentication"

config GOLIOTH_USE_CONNECTION_ID
	bool "Use DTLS 1.2 Connection IDs"
	select MBEDTLS_SSL_DTLS_CONNECTION_ID
	help
	  Use DTLS 1.2 Connection IDs. Connection IDs replace IP
	  addresses as the session identifier, and can be used to
	  reduce the number of handshakes a device has to make in
	  certain scenarios.

config GOLIOTH_AUTH_PSK_MBEDTLS_DEPS
	bool "mbedTLS dependencies for PSK auth"
	depends on MBEDTLS_BUILTIN || NRF_SECURITY
	# Select at least one server supported cipher
	imply MBEDTLS_CIPHER_GCM_ENABLED if (MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_CIPHER_CCM_ENABLED && !MBEDTLS_CIPHER_CBC_MODE_ENABLED)
	imply PSA_WANT_ALG_GCM if (MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && !PSA_WANT_ALG_CCM && !PSA_WANT_ALG_CBC_NO_PADDING)
	imply MBEDTLS_GCM_C if (NRF_SECURITY && !MBEDTLS_CCM_C)
	select MBEDTLS_KEY_EXCHANGE_PSK_ENABLED
	# Enable required PSA crypto modules
	imply PSA_WANT_ALG_TLS12_PRF if (MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO)
	imply PSA_WANT_ALG_TLS12_PSK_TO_MS if (MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO)
	# Satisfy build-time check of MBEDTLS_PK_C (needs MBEDTLS_ECP_C || MBEDTLS_RSA_C)
	imply MBEDTLS_ECP_C if (NRF_SECURITY && !MBEDTLS_RSA_C)
	help
	  Select mbedTLS dependencies for PSK based authentication.

	  This is a convenience option when using mbedTLS as a library to make
	  (D)TLS connection with Golioth cloud.

config GOLIOTH_AUTH_CERT_MBEDTLS_DEPS
	bool "mbedTLS dependencies for certificate based auth"
	depends on MBEDTLS_BUILTIN || NRF_SECURITY
	# Enable P-256 and P-384 for broad compatibility. Disabling these curves
	# may cause incompatibility with Golioth servers, now or in the future.
	imply MBEDTLS_ECP_DP_SECP256R1_ENABLED if !MBEDTLS_USE_PSA_CRYPTO
	imply MBEDTLS_ECP_DP_SECP384R1_ENABLED if !MBEDTLS_USE_PSA_CRYPTO
	# Same, but with PSA crypto API
	imply PSA_WANT_ECC_SECP_R1_256 if MBEDTLS_USE_PSA_CRYPTO
	imply PSA_WANT_ECC_SECP_R1_384 if MBEDTLS_USE_PSA_CRYPTO
	# Hashes
	imply MBEDTLS_SHA256 if !MBEDTLS_USE_PSA_CRYPTO
	imply MBEDTLS_SHA384 if !MBEDTLS_USE_PSA_CRYPTO
	imply PSA_WANT_ALG_SHA_256 if MBEDTLS_USE_PSA_CRYPTO
	imply PSA_WANT_ALG_SHA_384 if MBEDTLS_USE_PSA_CRYPTO
	# Select at least one server supported cipher
	imply MBEDTLS_CIPHER_GCM_ENABLED if (MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && !MBEDTLS_CIPHER_CCM_ENABLED)
	imply PSA_WANT_ALG_GCM if (MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && !PSA_WANT_ALG_CCM)
	select MBEDTLS_GCM_C if (NRF_SECURITY && !MBEDTLS_CCM_C)
	select MBEDTLS_ECP_C if !MBEDTLS_USE_PSA_CRYPTO
	select MBEDTLS_ECDH_C if !MBEDTLS_USE_PSA_CRYPTO
	select MBEDTLS_ECDSA_C if !MBEDTLS_USE_PSA_CRYPTO
	select MBEDTLS_RSA_C if !MBEDTLS_USE_PSA_CRYPTO
	select MBEDTLS_KEY_EXCHANGE_ECDHE_ECDSA_ENABLED
	select PSA_WANT_ALG_ECDH if MBEDTLS_USE_PSA_CRYPTO
	select PSA_WANT_KEY_TYPE_ECC_KEY_PAIR_DERIVE if MBEDTLS_USE_PSA_CRYPTO
	select PSA_WANT_KEY_TYPE_ECC_KEY_PAIR_BASIC if MBEDTLS_USE_PSA_CRYPTO
	select PSA_WANT_KEY_TYPE_ECC_KEY_PAIR_GENERATE if MBEDTLS_USE_PSA_CRYPTO
	select PSA_WANT_ALG_ECDSA if MBEDTLS_USE_PSA_CRYPTO
	select PSA_WANT_ALG_RSA_PKCS1V15_SIGN if MBEDTLS_USE_PSA_CRYPTO
	# Enable required PSA crypto modules
	select PSA_WANT_ALG_TLS12_PRF if MBEDTLS_USE_PSA_CRYPTO
	help
	  Select mbedTLS dependencies for certificate based authentication.

	  This is a convenience option when using mbedTLS as a library to make
	  (D)TLS connection with Golioth cloud.

config MBEDTLS_MPI_MAX_SIZE
	int
	default 512 if GOLIOTH_AUTH_CERT_MBEDTLS_DEPS

config GOLIOTH_CIPHERSUITES
	string "Ciphersuites"
	# Select single PSK ciphersuite (following ciphersuite preference in mbedTLS)
	default "TLS_PSK_WITH_AES_128_GCM_SHA256" if (GOLIOTH_AUTH_METHOD_PSK && MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && MBEDTLS_CIPHER_GCM_ENABLED)
	default "TLS_PSK_WITH_AES_128_CCM" if (GOLIOTH_AUTH_METHOD_PSK && MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && MBEDTLS_CIPHER_CCM_ENABLED)
	default "TLS_PSK_WITH_AES_128_CBC_SHA256" if (GOLIOTH_AUTH_METHOD_PSK && MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && MBEDTLS_CIPHER_MODE_CBC_ENABLED)
	# Same, but with PSA crypto API
	default "TLS_PSK_WITH_AES_128_GCM_SHA256" if (GOLIOTH_AUTH_METHOD_PSK && MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && PSA_WANT_ALG_GCM)
	default "TLS_PSK_WITH_AES_128_CBC_SHA256" if (GOLIOTH_AUTH_METHOD_PSK && MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && PSA_WANT_ALG_CBC_NO_PADDING)
	default "TLS_PSK_WITH_AES_128_CCM" if (GOLIOTH_AUTH_METHOD_PSK && MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && PSA_WANT_ALG_CCM)
	# Same, but for NCS flavour of mbedTLS
	default "TLS_PSK_WITH_AES_128_GCM_SHA256" if (GOLIOTH_AUTH_METHOD_PSK && ZEPHYR_NRF_MODULE && MBEDTLS_TLS_LIBRARY && MBEDTLS_GCM_C)
	default "TLS_PSK_WITH_AES_128_CCM" if (GOLIOTH_AUTH_METHOD_PSK && ZEPHYR_NRF_MODULE && MBEDTLS_TLS_LIBRARY && MBEDTLS_CCM_C)
	default "TLS_PSK_WITH_AES_128_CBC_SHA256" if (GOLIOTH_AUTH_METHOD_PSK && ZEPHYR_NRF_MODULE && MBEDTLS_TLS_LIBRARY && MBEDTLS_CIPHER_MODE_CBC)
	# Select all supported PSK ciphersuites if not using MBEDTLS_BUILTIN
	default "TLS_PSK_WITH_AES_128_GCM_SHA256 TLS_PSK_WITH_AES_128_CCM TLS_PSK_WITH_AES_128_CBC_SHA256 TLS_PSK_WITH_AES_128_CCM_8" if GOLIOTH_AUTH_METHOD_PSK
	# Select single cert-based ciphersuite (following ciphersuite preference in mbedTLS)
	default "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" if (GOLIOTH_AUTH_METHOD_CERT && MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && MBEDTLS_CIPHER_GCM_ENABLED)
	default "TLS_ECDHE_ECDSA_WITH_AES_128_CCM" if (GOLIOTH_AUTH_METHOD_CERT && MBEDTLS_BUILTIN && !MBEDTLS_USE_PSA_CRYPTO && MBEDTLS_CIPHER_CCM_ENABLED)
	# Same, but with PSA crypto API
	default "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" if (GOLIOTH_AUTH_METHOD_CERT && MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && PSA_WANT_ALG_GCM)
	default "TLS_ECDHE_ECDSA_WITH_AES_128_CCM" if (GOLIOTH_AUTH_METHOD_CERT && MBEDTLS_BUILTIN && MBEDTLS_USE_PSA_CRYPTO && PSA_WANT_ALG_CCM)
	# Same, but for NCS flavour of mbedTLS
	default "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" if (GOLIOTH_AUTH_METHOD_CERT && ZEPHYR_NRF_MODULE && MBEDTLS_TLS_LIBRARY && MBEDTLS_GCM_C)
	default "TLS_ECDHE_ECDSA_WITH_AES_128_CCM" if (GOLIOTH_AUTH_METHOD_CERT && ZEPHYR_NRF_MODULE && MBEDTLS_TLS_LIBRARY && MBEDTLS_CCM_C)
	# Select all supported cert-based ciphersuites if not using MBEDTLS_BUILTIN
	default "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 TLS_ECDHE_ECDSA_WITH_AES_128_CCM TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8" if GOLIOTH_AUTH_METHOD_CERT
	help
	  Ciphersuite list used during (D)TLS handshakes. Default value contains currently supported
	  ciphersuites by Golioth server.

	  Use string representations of ciphersuites as defined by IANA in:
	  https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml

	  Select single ciphersuite to reduce data exchanged during (D)TLS handshake, due to reduced
	  ciphersuite list in Client Hello message.

	  Make sure that credentials (e.g. using Zephyr TLS credentials subsystem) are configured
	  for each ciphersuite (e.g. PSKs for PSK-based ciphersuites or certificates for
	  certificate-based ciphersuites) that is negotiated.

	  If empty, then underlying TLS implementation (e.g. mbedTLS library) decides which
	  ciphersuites to use. Relying on that is not recommended!

config GOLIOTH_COAP_CLIENT_CREDENTIALS_TAG
	int "TLS credentials secure tag"
	default 515765868
	help
	  Secure tag, which is a reference to TLS credential. This value is
	  configured on created (D)TLS socket in order reference credentials
	  used during connection handshake.

	  See 'sec_tag_t' typedef in Zephyr for details.

config GOLIOTH_COAP_CLIENT_SECONDARY_CA_CREDENTIALS_TAG
    int "Secondary CA Cert TLS credentials secure tag"
    depends on GOLIOTH_SECONDARY_CA_CRT
    default 515765869
    help
      Secure tag for the secondary CA certificate

config GOLIOTH_HOSTNAME_VERIFICATION
	bool "Hostname verification"
	default y if GOLIOTH_AUTH_METHOD_CERT
	help
	  Enable hostname verification on (D)TLS layer.

if GOLIOTH_HOSTNAME_VERIFICATION

config GOLIOTH_HOSTNAME_VERIFICATION_SKIP
	bool "(development only) Skip hostname verification"
	help
	  Skip TLS layer hostname verification, by passing NULL to
	  zsock_setsockopt(..., SOL_TLS, TLS_HOSTNAME, ...).

	  Use this only for development with self-hosted server.

endif # GOLIOTH_HOSTNAME_VERIFICATION

config GOLIOTH_HARDCODED_CA_CRT_PATH
    default "${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/src/isrgrootx1.der"

config GOLIOTH_HARDCODED_SECONDARY_CA_CRT_PATH
    default "${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/src/goliothrootx1.der"

endmenu # authentication

menu "CoAP"

source "${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/src/Kconfig.coap"

config GOLIOTH_COAP_MAX_PATH_LEN
    int
    default COAP_EXTENDED_OPTIONS_LEN_VALUE if COAP_EXTENDED_OPTIONS_LEN
    default 12
    help
        Maximum length of a CoAP path (everything after "coaps://coap.golioth.io/"). Increase this
        value by setting two symbols provided by the Zephyr CoAP library:

          - CONFIG_COAP_EXTENDED_OPTIONS_LEN=y
          - CONFIG_COAP_EXTENDED_OPTIONS_LEN_VALUE=39


config GOLIOTH_COAP_CLIENT_RX_TIMEOUT_SEC
	int "Receive timeout (seconds)"
	default 30
	help
	  Receive timeout, after which connection will be reestablished.

config GOLIOTH_COAP_CLIENT_RX_BUF_SIZE
	int "Receive buffer size"
	default 1280
	help
	  Size of receive buffer, which is used for reading data from network
	  socket.

endmenu # CoAP Settings

menu "Logging"

source "subsys/logging/Kconfig.template.log_config"

config LOG_BACKEND_GOLIOTH
	bool "Golioth logging backend"
	depends on LOG
	depends on !LOG_MODE_IMMEDIATE
	depends on GOLIOTH_FIRMWARE_SDK
	select LOG_OUTPUT
	select ZCBOR
	help
	  Enable sending logs to Golioth cloud.

if LOG_BACKEND_GOLIOTH

config LOG_BACKEND_GOLIOTH_MAX_LOG_STRING_SIZE
	int "Maximum length of a formatted log string"
	default 256
	help
	  Specified maximum buffer size used for storing a formatted log
	  string before sending to Golioth cloud.

endif # LOG_BACKEND_GOLIOTH

source "${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/src/Kconfig.logging"

endmenu # Logging

rsource '${ZEPHYR_GOLIOTH_FIRMWARE_SDK_MODULE_DIR}/examples/zephyr/common/Kconfig'

config GOLIOTH_ZEPHYR_THREAD_STACKS
	int "Number of thread stacks in Zephyr pool"
	default 2
	help
	  Number of thread stacks statically allocated for the use in golioth_sys_thread_create().

config GOLIOTH_ZEPHYR_THREAD_STACK_SIZE
	int "Thread stack sizes in Zephyr pool"
	default GOLIOTH_COAP_THREAD_STACK_SIZE
	help
	  Threads stacks sizes for the use in golioth_sys_thread_create().

menuconfig GOLIOTH_SHOW_VERSION_BOOT_MSG
	bool "Show the Golioth Firmware SDK version at boot"
	default y
    help
      Automatically display the Golioth Firmware SDK version in the device's console output during
      boot.

if GOLIOTH_SHOW_VERSION_BOOT_MSG

config GOLIOTH_VERSION_INCLUDE_COMMIT
    bool "Include the commit hash in the version message"
    default y
    help
      Show the commit has in addition to the SDK version (eg: 0.16.0-34-ga4e5523debf1)

endif # GOLIOTH_SHOW_VERSION_BOOT_MSG
endif # GOLIOTH_FIRMWARE_SDK
