From 93156ac6b8e8dca6a3a0d3f046a8d310d18373c2 Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Mon, 6 May 2024 09:48:31 +0200
Subject: [PATCH] drivers: nsos: support setsockopt(SO_RCVTIMEO)

Handle timeout on receive that is configured using SO_RCVTIMEO.

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 drivers/net/nsos_adapt.c   | 16 ++++++++++++++++
 drivers/net/nsos_socket.h  |  7 +++++++
 drivers/net/nsos_sockets.c | 34 +++++++++++++++++++++++++++++++++-
 3 files changed, 56 insertions(+), 1 deletion(-)

diff --git a/drivers/net/nsos_adapt.c b/drivers/net/nsos_adapt.c
index 104aa392fa8..d3f787762c4 100644
--- a/drivers/net/nsos_adapt.c
+++ b/drivers/net/nsos_adapt.c
@@ -651,6 +651,22 @@ int nsos_adapt_setsockopt(int fd, int nsos_mid_level, int nsos_mid_optname,
 			return nsos_adapt_setsockopt_int(fd, SOL_SOCKET, SO_PRIORITY,
 							 nsos_mid_optval, nsos_mid_optlen);
 
+		case NSOS_MID_SO_RCVTIMEO: {
+			const struct nsos_mid_timeval *nsos_mid_tv = nsos_mid_optval;
+			struct timeval tv = {
+				.tv_sec = nsos_mid_tv->tv_sec,
+				.tv_usec = nsos_mid_tv->tv_usec,
+			};
+			int ret;
+
+			ret = setsockopt(fd, SOL_SOCKET, SO_RCVTIMEO,
+					 &tv, sizeof(tv));
+			if (ret < 0) {
+				return -errno_to_nsos_mid(errno);
+			}
+
+			return 0;
+		}
 		case NSOS_MID_SO_RCVBUF:
 			return nsos_adapt_setsockopt_int(fd, SOL_SOCKET, SO_RCVBUF,
 							 nsos_mid_optval, nsos_mid_optlen);
diff --git a/drivers/net/nsos_socket.h b/drivers/net/nsos_socket.h
index dbc14997559..10db34cdcf1 100644
--- a/drivers/net/nsos_socket.h
+++ b/drivers/net/nsos_socket.h
@@ -7,6 +7,8 @@
 #ifndef __DRIVERS_NET_NSOS_SOCKET_H__
 #define __DRIVERS_NET_NSOS_SOCKET_H__
 
+#include <stdint.h>
+
 /**
  * @name Socket level options (NSOS_MID_SOL_SOCKET)
  * @{
@@ -78,6 +80,11 @@
 /** Socket TX time (when the data should be sent) */
 #define NSOS_MID_SO_TXTIME 61
 
+struct nsos_mid_timeval {
+	int64_t tv_sec;
+	int64_t tv_usec;
+};
+
 /** @} */
 
 #endif /* __DRIVERS_NET_NSOS_SOCKET_H__ */
diff --git a/drivers/net/nsos_sockets.c b/drivers/net/nsos_sockets.c
index 24d686f536a..5dd528e9101 100644
--- a/drivers/net/nsos_sockets.c
+++ b/drivers/net/nsos_sockets.c
@@ -42,6 +42,8 @@ struct nsos_socket {
 	struct nsos_mid_pollfd pollfd;
 	struct k_poll_signal poll;
 
+	k_timeout_t recv_timeout;
+
 	sys_dnode_t node;
 };
 
@@ -180,6 +182,7 @@ static int nsos_socket_create(int family, int type, int proto)
 	}
 
 	sock->fd = fd;
+	sock->recv_timeout = K_FOREVER;
 
 	sock->pollfd.fd = nsos_adapt_socket(family_mid, type_mid, proto_mid);
 	if (sock->pollfd.fd < 0) {
@@ -550,7 +553,7 @@ static int nsos_wait_for_pollin(struct nsos_socket *sock)
 		return ret;
 	}
 
-	ret = k_poll(poll_events, ARRAY_SIZE(poll_events), K_FOREVER);
+	ret = k_poll(poll_events, ARRAY_SIZE(poll_events), sock->recv_timeout);
 	if (ret != 0 && ret != -EAGAIN && ret != -EINTR) {
 		return ret;
 	}
@@ -1067,6 +1070,35 @@ static int nsos_setsockopt(void *obj, int level, int optname,
 
 			return 0;
 		}
+		case SO_RCVTIMEO: {
+			const struct zsock_timeval *tv = optval;
+			struct nsos_mid_timeval nsos_mid_tv;
+			int err;
+
+			if (optlen != sizeof(struct zsock_timeval)) {
+				errno = EINVAL;
+				return -1;
+			}
+
+			nsos_mid_tv.tv_sec = tv->tv_sec;
+			nsos_mid_tv.tv_usec = tv->tv_usec;
+
+			err = nsos_adapt_setsockopt(sock->pollfd.fd, NSOS_MID_SOL_SOCKET,
+						    NSOS_MID_SO_RCVTIMEO, &nsos_mid_tv,
+						    sizeof(nsos_mid_tv));
+			if (err) {
+				errno = errno_from_nsos_mid(-err);
+				return -1;
+			}
+
+			if (tv->tv_sec == 0 && tv->tv_usec == 0) {
+				sock->recv_timeout = K_FOREVER;
+			} else {
+				sock->recv_timeout = K_USEC(tv->tv_sec * 1000000LL + tv->tv_usec);
+			}
+
+			return 0;
+		}
 		case SO_RCVBUF:
 			return nsos_setsockopt_int(sock,
 						   NSOS_MID_SOL_SOCKET, NSOS_MID_SO_RCVBUF,
-- 
2.45.2

