From 32b93328dcb142a2f2ab5b5399fb4b92275ea3dc Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Thu, 22 Feb 2024 15:01:05 +0100
Subject: [PATCH] drivers: net: nsos: add F_GETFL and F_SETFL support

This allows to use Zephyr TLS subsystem with Native Sim offloaded sockets.

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 drivers/net/CMakeLists.txt |  2 ++
 drivers/net/nsos.h         |  3 ++
 drivers/net/nsos_adapt.c   | 23 ++++++++++++
 drivers/net/nsos_fcntl.c   | 72 ++++++++++++++++++++++++++++++++++++++
 drivers/net/nsos_fcntl.h   | 22 ++++++++++++
 drivers/net/nsos_sockets.c | 23 ++++++++++++
 6 files changed, 145 insertions(+)
 create mode 100644 drivers/net/nsos_fcntl.c
 create mode 100644 drivers/net/nsos_fcntl.h

diff --git a/drivers/net/CMakeLists.txt b/drivers/net/CMakeLists.txt
index 10dae7521ca..6508490f926 100644
--- a/drivers/net/CMakeLists.txt
+++ b/drivers/net/CMakeLists.txt
@@ -16,8 +16,10 @@ if(CONFIG_NET_NATIVE_OFFLOADED_SOCKETS)
   )
   zephyr_library_sources(nsos_dns.c)
   zephyr_library_sources(nsos_errno.c)
+  zephyr_library_sources(nsos_fcntl.c)
   zephyr_library_sources(nsos_sockets.c)
   target_sources(native_simulator INTERFACE nsos_adapt.c)
   target_sources(native_simulator INTERFACE nsos_dns.c)
   target_sources(native_simulator INTERFACE nsos_errno.c)
+  target_sources(native_simulator INTERFACE nsos_fcntl.c)
 endif()
diff --git a/drivers/net/nsos.h b/drivers/net/nsos.h
index 97f8ec76257..9af667fb311 100644
--- a/drivers/net/nsos.h
+++ b/drivers/net/nsos.h
@@ -115,6 +115,9 @@ int nsos_adapt_recvfrom(int fd, void *buf, size_t len, int flags,
 			struct nsos_mid_sockaddr *addr, size_t *addrlen);
 
 
+int nsos_adapt_fcntl_getfl(int fd);
+int nsos_adapt_fcntl_setfl(int fd, int flags);
+
 int nsos_adapt_getaddrinfo(const char *node, const char *service,
 			   const struct nsos_mid_addrinfo *hints,
 			   struct nsos_mid_addrinfo **res,
diff --git a/drivers/net/nsos_adapt.c b/drivers/net/nsos_adapt.c
index 39b7a5b3cc8..d97b99e5de9 100644
--- a/drivers/net/nsos_adapt.c
+++ b/drivers/net/nsos_adapt.c
@@ -11,6 +11,7 @@
  */
 
 #include <errno.h>
+#include <fcntl.h>
 #include <netdb.h>
 #include <netinet/in.h>
 #include <poll.h>
@@ -22,6 +23,7 @@
 #include "nsos.h"
 #include "nsos_dns.h"
 #include "nsos_errno.h"
+#include "nsos_fcntl.h"
 
 #include "nsi_tracing.h"
 
@@ -572,3 +574,24 @@ void nsos_adapt_freeaddrinfo(struct nsos_mid_addrinfo *res_mid)
 	freeaddrinfo(wrap->addrinfo);
 	free(wrap);
 }
+
+int nsos_adapt_fcntl_getfl(int fd)
+{
+	int flags;
+
+	flags = fcntl(fd, F_GETFL);
+
+	return fl_to_nsos_mid(flags);
+}
+
+int nsos_adapt_fcntl_setfl(int fd, int flags)
+{
+	int ret;
+
+	ret = fcntl(fd, F_SETFL, fl_from_nsos_mid(flags));
+	if (ret < 0) {
+		return -errno;
+	}
+
+	return 0;
+}
diff --git a/drivers/net/nsos_fcntl.c b/drivers/net/nsos_fcntl.c
new file mode 100644
index 00000000000..6cb02d03a6b
--- /dev/null
+++ b/drivers/net/nsos_fcntl.c
@@ -0,0 +1,72 @@
+/**
+ * Copyright (c) 2023-2024 Marcin Niestroj
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#include <fcntl.h>
+
+#include "nsos_errno.h"
+#include "nsos_fcntl.h"
+
+#include <stdbool.h>
+
+static int fl_to_nsos_mid_(int flags, bool strict)
+{
+	int flags_mid = 0;
+
+#define TO_NSOS_MID(_flag)				\
+	if (flags & (_flag)) {				\
+		flags &= ~(_flag);			\
+		flags_mid |= NSOS_MID_ ## _flag;	\
+	}
+
+	TO_NSOS_MID(O_RDONLY);
+	TO_NSOS_MID(O_WRONLY);
+	TO_NSOS_MID(O_RDWR);
+
+	TO_NSOS_MID(O_APPEND);
+	TO_NSOS_MID(O_EXCL);
+	TO_NSOS_MID(O_NONBLOCK);
+
+#undef TO_NSOS_MID
+
+	if (strict && flags != 0) {
+		return -NSOS_MID_EINVAL;
+	}
+
+	return flags_mid;
+}
+
+int fl_to_nsos_mid(int flags)
+{
+	return fl_to_nsos_mid_(flags, false);
+}
+
+int fl_to_nsos_mid_strict(int flags)
+{
+	return fl_to_nsos_mid_(flags, true);
+}
+
+int fl_from_nsos_mid(int flags_mid)
+{
+	int flags = 0;
+
+#define FROM_NSOS_MID(_flag)				\
+	if (flags_mid & NSOS_MID_ ## _flag) {		\
+		flags_mid &= ~NSOS_MID_ ## _flag;	\
+		flags |= _flag;				\
+	}
+
+	FROM_NSOS_MID(O_RDONLY);
+	FROM_NSOS_MID(O_WRONLY);
+	FROM_NSOS_MID(O_RDWR);
+
+	FROM_NSOS_MID(O_APPEND);
+	FROM_NSOS_MID(O_EXCL);
+	FROM_NSOS_MID(O_NONBLOCK);
+
+#undef FROM_NSOS_MID
+
+	return flags;
+}
diff --git a/drivers/net/nsos_fcntl.h b/drivers/net/nsos_fcntl.h
new file mode 100644
index 00000000000..3cab88896f7
--- /dev/null
+++ b/drivers/net/nsos_fcntl.h
@@ -0,0 +1,22 @@
+/**
+ * Copyright (c) 2023-2024 Marcin Niestroj
+ *
+ * SPDX-License-Identifier: Apache-2.0
+ */
+
+#ifndef __DRIVERS_NET_NSOS_FCNTL_H__
+#define __DRIVERS_NET_NSOS_FCNTL_H__
+
+#define NSOS_MID_O_RDONLY	00
+#define NSOS_MID_O_WRONLY	01
+#define NSOS_MID_O_RDWR		02
+
+#define NSOS_MID_O_APPEND	0x0400
+#define NSOS_MID_O_EXCL		0x0800
+#define NSOS_MID_O_NONBLOCK	0x4000
+
+int fl_to_nsos_mid(int flags);
+int fl_to_nsos_mid_strict(int flags);
+int fl_from_nsos_mid(int flags);
+
+#endif /* __DRIVERS_NET_NSOS_FCNTL_H__ */
diff --git a/drivers/net/nsos_sockets.c b/drivers/net/nsos_sockets.c
index 8ae9e487b59..d1b7f85775e 100644
--- a/drivers/net/nsos_sockets.c
+++ b/drivers/net/nsos_sockets.c
@@ -17,12 +17,14 @@
 #include <zephyr/net/net_ip.h>
 #include <zephyr/net/offloaded_netdev.h>
 #include <zephyr/net/socket_offload.h>
+#include <zephyr/posix/fcntl.h>
 #include <zephyr/sys/fdtable.h>
 
 #include "sockets_internal.h"
 #include "nsos.h"
 #include "nsos_dns.h"
 #include "nsos_errno.h"
+#include "nsos_fcntl.h"
 
 #include "nsi_host_trampolines.h"
 
@@ -226,6 +228,27 @@ static int nsos_ioctl(void *obj, unsigned int request, va_list args)
 
 	case ZFD_IOCTL_POLL_OFFLOAD:
 		return -EOPNOTSUPP;
+
+	case F_GETFL: {
+		int flags;
+
+		flags = nsos_adapt_fcntl_getfl(OBJ_TO_FD(obj));
+
+		return fl_from_nsos_mid(flags);
+	}
+
+	case F_SETFL: {
+		int flags = va_arg(args, int);
+		int ret;
+
+		ret = fl_to_nsos_mid_strict(flags);
+		if (ret < 0) {
+			errno = errno_from_nsos_mid(-ret);
+			return -1;
+		}
+
+		return nsos_adapt_fcntl_setfl(OBJ_TO_FD(obj), flags);
+	}
 	}
 
 	return -EINVAL;
-- 
2.43.2

