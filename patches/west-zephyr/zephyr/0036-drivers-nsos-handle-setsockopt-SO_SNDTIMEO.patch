From e01fea0df2bd2006053864429fe365e20d718949 Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Tue, 4 Jun 2024 14:08:41 +0200
Subject: [PATCH] drivers: nsos: handle setsockopt(SO_SNDTIMEO)

Handle SO_SNDTIMEO similar to how SO_RCVTIMEO is handled.

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 drivers/net/nsos_adapt.c   | 16 ++++++++++++++++
 drivers/net/nsos_sockets.c | 35 +++++++++++++++++++++++++++++++++--
 2 files changed, 49 insertions(+), 2 deletions(-)

diff --git a/drivers/net/nsos_adapt.c b/drivers/net/nsos_adapt.c
index 5514bb4a134..91be0b4cf5b 100644
--- a/drivers/net/nsos_adapt.c
+++ b/drivers/net/nsos_adapt.c
@@ -692,6 +692,22 @@ int nsos_adapt_setsockopt(int fd, int nsos_mid_level, int nsos_mid_optname,
 
 			return 0;
 		}
+		case NSOS_MID_SO_SNDTIMEO: {
+			const struct nsos_mid_timeval *nsos_mid_tv = nsos_mid_optval;
+			struct timeval tv = {
+				.tv_sec = nsos_mid_tv->tv_sec,
+				.tv_usec = nsos_mid_tv->tv_usec,
+			};
+			int ret;
+
+			ret = setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO,
+					 &tv, sizeof(tv));
+			if (ret < 0) {
+				return -errno_to_nsos_mid(errno);
+			}
+
+			return 0;
+		}
 		case NSOS_MID_SO_RCVBUF:
 			return nsos_adapt_setsockopt_int(fd, SOL_SOCKET, SO_RCVBUF,
 							 nsos_mid_optval, nsos_mid_optlen);
diff --git a/drivers/net/nsos_sockets.c b/drivers/net/nsos_sockets.c
index 9a9594579a2..4337e689fb1 100644
--- a/drivers/net/nsos_sockets.c
+++ b/drivers/net/nsos_sockets.c
@@ -50,6 +50,7 @@ struct nsos_socket {
 	int fd;
 
 	k_timeout_t recv_timeout;
+	k_timeout_t send_timeout;
 
 	struct nsos_socket_poll poll;
 };
@@ -190,6 +191,7 @@ static int nsos_socket_create(int family, int type, int proto)
 
 	sock->fd = fd;
 	sock->recv_timeout = K_FOREVER;
+	sock->send_timeout = K_FOREVER;
 
 	sock->poll.mid.fd = nsos_adapt_socket(family_mid, type_mid, proto_mid);
 	if (sock->poll.mid.fd < 0) {
@@ -702,7 +704,7 @@ static ssize_t nsos_sendto(void *obj, const void *buf, size_t len, int flags,
 		goto return_ret;
 	}
 
-	ret = nsos_poll_if_blocking(sock, ZSOCK_POLLOUT, K_FOREVER, flags);
+	ret = nsos_poll_if_blocking(sock, ZSOCK_POLLOUT, sock->send_timeout, flags);
 	if (ret < 0) {
 		goto return_ret;
 	}
@@ -761,7 +763,7 @@ static ssize_t nsos_sendmsg(void *obj, const struct msghdr *msg, int flags)
 	msg_mid.msg_controllen = 0;
 	msg_mid.msg_flags = 0;
 
-	ret = nsos_poll_if_blocking(sock, ZSOCK_POLLOUT, K_FOREVER, flags);
+	ret = nsos_poll_if_blocking(sock, ZSOCK_POLLOUT, sock->send_timeout, flags);
 	if (ret < 0) {
 		goto free_msg_iov;
 	}
@@ -1153,6 +1155,35 @@ static int nsos_setsockopt(void *obj, int level, int optname,
 
 			return 0;
 		}
+		case SO_SNDTIMEO: {
+			const struct zsock_timeval *tv = optval;
+			struct nsos_mid_timeval nsos_mid_tv;
+			int err;
+
+			if (optlen != sizeof(struct zsock_timeval)) {
+				errno = EINVAL;
+				return -1;
+			}
+
+			nsos_mid_tv.tv_sec = tv->tv_sec;
+			nsos_mid_tv.tv_usec = tv->tv_usec;
+
+			err = nsos_adapt_setsockopt(sock->poll.mid.fd, NSOS_MID_SOL_SOCKET,
+						    NSOS_MID_SO_SNDTIMEO, &nsos_mid_tv,
+						    sizeof(nsos_mid_tv));
+			if (err) {
+				errno = errno_from_nsos_mid(-err);
+				return -1;
+			}
+
+			if (tv->tv_sec == 0 && tv->tv_usec == 0) {
+				sock->send_timeout = K_FOREVER;
+			} else {
+				sock->send_timeout = K_USEC(tv->tv_sec * 1000000LL + tv->tv_usec);
+			}
+
+			return 0;
+		}
 		case SO_RCVBUF:
 			return nsos_setsockopt_int(sock,
 						   NSOS_MID_SOL_SOCKET, NSOS_MID_SO_RCVBUF,
-- 
2.45.2

