From ce065135175c066d30c1753b41ce878db56d318c Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Mon, 6 May 2024 09:52:51 +0200
Subject: [PATCH] drivers: nsos: support IPPROTO_TCP getsockopt() and
 setsockopt()

Handle IPPROTO_TCP specific options in getsockopt() and setsockopt() APIs.

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 drivers/net/nsos_adapt.c   | 33 +++++++++++++++++++++++++++++++
 drivers/net/nsos_socket.h  | 16 +++++++++++++++
 drivers/net/nsos_sockets.c | 40 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 89 insertions(+)

diff --git a/drivers/net/nsos_adapt.c b/drivers/net/nsos_adapt.c
index 7e3363c73f8..9e1a3dd062b 100644
--- a/drivers/net/nsos_adapt.c
+++ b/drivers/net/nsos_adapt.c
@@ -16,6 +16,7 @@
 #include <fcntl.h>
 #include <netdb.h>
 #include <netinet/in.h>
+#include <netinet/tcp.h>
 #include <poll.h>
 #include <stdlib.h>
 #include <string.h>
@@ -624,6 +625,22 @@ int nsos_adapt_getsockopt(int fd, int nsos_mid_level, int nsos_mid_optname,
 			return nsos_adapt_getsockopt_int(fd, SOL_SOCKET, SO_KEEPALIVE,
 							 nsos_mid_optval, nsos_mid_optlen);
 		}
+
+	case NSOS_MID_IPPROTO_TCP:
+		switch (nsos_mid_optname) {
+		case NSOS_MID_TCP_NODELAY:
+			return nsos_adapt_getsockopt_int(fd, IPPROTO_TCP, TCP_NODELAY,
+							 nsos_mid_optval, nsos_mid_optlen);
+		case NSOS_MID_TCP_KEEPIDLE:
+			return nsos_adapt_getsockopt_int(fd, IPPROTO_TCP, TCP_KEEPIDLE,
+							 nsos_mid_optval, nsos_mid_optlen);
+		case NSOS_MID_TCP_KEEPINTVL:
+			return nsos_adapt_getsockopt_int(fd, IPPROTO_TCP, TCP_KEEPINTVL,
+							 nsos_mid_optval, nsos_mid_optlen);
+		case NSOS_MID_TCP_KEEPCNT:
+			return nsos_adapt_getsockopt_int(fd, IPPROTO_TCP, TCP_KEEPCNT,
+							 nsos_mid_optval, nsos_mid_optlen);
+		}
 	}
 
 	return -NSOS_MID_EOPNOTSUPP;
@@ -687,6 +704,22 @@ int nsos_adapt_setsockopt(int fd, int nsos_mid_level, int nsos_mid_optname,
 			return nsos_adapt_setsockopt_int(fd, SOL_SOCKET, SO_KEEPALIVE,
 							 nsos_mid_optval, nsos_mid_optlen);
 		}
+
+	case NSOS_MID_IPPROTO_TCP:
+		switch (nsos_mid_optname) {
+		case NSOS_MID_TCP_NODELAY:
+			return nsos_adapt_setsockopt_int(fd, IPPROTO_TCP, TCP_NODELAY,
+							 nsos_mid_optval, nsos_mid_optlen);
+		case NSOS_MID_TCP_KEEPIDLE:
+			return nsos_adapt_setsockopt_int(fd, IPPROTO_TCP, TCP_KEEPIDLE,
+							 nsos_mid_optval, nsos_mid_optlen);
+		case NSOS_MID_TCP_KEEPINTVL:
+			return nsos_adapt_setsockopt_int(fd, IPPROTO_TCP, TCP_KEEPINTVL,
+							 nsos_mid_optval, nsos_mid_optlen);
+		case NSOS_MID_TCP_KEEPCNT:
+			return nsos_adapt_setsockopt_int(fd, IPPROTO_TCP, TCP_KEEPCNT,
+							 nsos_mid_optval, nsos_mid_optlen);
+		}
 	}
 
 	return -NSOS_MID_EOPNOTSUPP;
diff --git a/drivers/net/nsos_socket.h b/drivers/net/nsos_socket.h
index 10db34cdcf1..f63b8b30049 100644
--- a/drivers/net/nsos_socket.h
+++ b/drivers/net/nsos_socket.h
@@ -87,4 +87,20 @@ struct nsos_mid_timeval {
 
 /** @} */
 
+/**
+ * @name TCP level options (NSOS_MID_IPPROTO_TCP)
+ * @{
+ */
+/* Socket options for NSOS_MID_IPPROTO_TCP level */
+/** Disable TCP buffering (ignored, for compatibility) */
+#define NSOS_MID_TCP_NODELAY 1
+/** Start keepalives after this period (seconds) */
+#define NSOS_MID_TCP_KEEPIDLE 2
+/** Interval between keepalives (seconds) */
+#define NSOS_MID_TCP_KEEPINTVL 3
+/** Number of keepalives before dropping connection */
+#define NSOS_MID_TCP_KEEPCNT 4
+
+/** @} */
+
 #endif /* __DRIVERS_NET_NSOS_SOCKET_H__ */
diff --git a/drivers/net/nsos_sockets.c b/drivers/net/nsos_sockets.c
index df6f97e8745..40cb6a62f90 100644
--- a/drivers/net/nsos_sockets.c
+++ b/drivers/net/nsos_sockets.c
@@ -1024,6 +1024,26 @@ static int nsos_getsockopt(void *obj, int level, int optname,
 						   NSOS_MID_SOL_SOCKET, NSOS_MID_SO_KEEPALIVE,
 						   optval, optlen);
 		}
+
+	case IPPROTO_TCP:
+		switch (optname) {
+		case TCP_NODELAY:
+			return nsos_getsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_NODELAY,
+						   optval, optlen);
+		case TCP_KEEPIDLE:
+			return nsos_getsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_KEEPIDLE,
+						   optval, optlen);
+		case TCP_KEEPINTVL:
+			return nsos_getsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_KEEPINTVL,
+						   optval, optlen);
+		case TCP_KEEPCNT:
+			return nsos_getsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_KEEPCNT,
+						   optval, optlen);
+		}
 	}
 
 	errno = EOPNOTSUPP;
@@ -1133,6 +1153,26 @@ static int nsos_setsockopt(void *obj, int level, int optname,
 						   NSOS_MID_SOL_SOCKET, NSOS_MID_SO_KEEPALIVE,
 						   optval, optlen);
 		}
+
+	case IPPROTO_TCP:
+		switch (optname) {
+		case TCP_NODELAY:
+			return nsos_setsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_NODELAY,
+						   optval, optlen);
+		case TCP_KEEPIDLE:
+			return nsos_setsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_KEEPIDLE,
+						   optval, optlen);
+		case TCP_KEEPINTVL:
+			return nsos_setsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_KEEPINTVL,
+						   optval, optlen);
+		case TCP_KEEPCNT:
+			return nsos_setsockopt_int(sock,
+						   NSOS_MID_IPPROTO_TCP, NSOS_MID_TCP_KEEPCNT,
+						   optval, optlen);
+		}
 	}
 
 	errno = EOPNOTSUPP;
-- 
2.45.2

