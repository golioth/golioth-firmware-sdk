From 8c526e228f5742843e9dfe9e013befa21992b48d Mon Sep 17 00:00:00 2001
From: Marcin Niestroj <m.niestroj@emb.dev>
Date: Tue, 6 Feb 2024 13:24:09 +0100
Subject: [PATCH] drivers: net: nsos: implement poll() syscall

Use NSI_HW_EVENT() in order to periodically check for events in host
sockets. Whenever there is a socket event ready to be processed by Zephyr,
raise native_sim (newly introduced) CPU interrupt, so that Zephyr driver
can signal readiness with k_poll().

Maintain two lists of Zephyr poll() executions, one for Zephyr and one for
host system. Iterated through them whenever there is some event to be
processed.

Signed-off-by: Marcin Niestroj <m.niestroj@emb.dev>
---
 drivers/net/CMakeLists.txt                    |   3 +
 drivers/net/nsos.h                            |   8 +
 drivers/net/nsos_adapt.c                      |  76 +++++++
 drivers/net/nsos_sockets.c                    | 193 +++++++++++++++---
 .../native/src/include/nsi_cpu0_interrupts.h  |   1 +
 5 files changed, 255 insertions(+), 26 deletions(-)

diff --git a/drivers/net/CMakeLists.txt b/drivers/net/CMakeLists.txt
index 6508490f926..98ee3a9b090 100644
--- a/drivers/net/CMakeLists.txt
+++ b/drivers/net/CMakeLists.txt
@@ -18,6 +18,9 @@ if(CONFIG_NET_NATIVE_OFFLOADED_SOCKETS)
   zephyr_library_sources(nsos_errno.c)
   zephyr_library_sources(nsos_fcntl.c)
   zephyr_library_sources(nsos_sockets.c)
+  target_compile_options(native_simulator BEFORE INTERFACE
+    -I${ZEPHYR_BASE}/include
+  )
   target_sources(native_simulator INTERFACE nsos_adapt.c)
   target_sources(native_simulator INTERFACE nsos_dns.c)
   target_sources(native_simulator INTERFACE nsos_errno.c)
diff --git a/drivers/net/nsos.h b/drivers/net/nsos.h
index 9af667fb311..79a24989bae 100644
--- a/drivers/net/nsos.h
+++ b/drivers/net/nsos.h
@@ -10,6 +10,7 @@
 #include <stddef.h>
 #include <stdint.h>
 #include <sys/types.h>
+#include <zephyr/sys/dlist.h>
 
 /* Protocol families. */
 #define NSOS_MID_PF_UNSPEC       0          /**< Unspecified protocol family.  */
@@ -75,6 +76,11 @@ struct nsos_mid_pollfd {
 	int fd;
 	short events;
 	short revents;
+
+	void (*cb)(struct nsos_mid_pollfd *pollfd_mid);
+
+	sys_dnode_t zephyr_node;
+	sys_dnode_t host_node;
 };
 
 struct nsos_mid_addrinfo {
@@ -114,6 +120,8 @@ int nsos_adapt_sendto(int fd, const void *buf, size_t len, int flags,
 int nsos_adapt_recvfrom(int fd, void *buf, size_t len, int flags,
 			struct nsos_mid_sockaddr *addr, size_t *addrlen);
 
+void nsos_adapt_poll_add(struct nsos_mid_pollfd *pollfd);
+void nsos_adapt_poll_remove(struct nsos_mid_pollfd *pollfd);
 
 int nsos_adapt_fcntl_getfl(int fd);
 int nsos_adapt_fcntl_setfl(int fd, int flags);
diff --git a/drivers/net/nsos_adapt.c b/drivers/net/nsos_adapt.c
index d97b99e5de9..6309ab89404 100644
--- a/drivers/net/nsos_adapt.c
+++ b/drivers/net/nsos_adapt.c
@@ -25,10 +25,17 @@
 #include "nsos_errno.h"
 #include "nsos_fcntl.h"
 
+#include "irq_ctrl.h"
+#include "nsi_cpu0_interrupts.h"
+#include "nsi_hws_models_if.h"
 #include "nsi_tracing.h"
 
 #include <stdio.h>
 
+#include <zephyr/sys/dlist.h>
+
+static sys_dlist_t nsos_adapt_sockets = SYS_DLIST_STATIC_INIT(&nsos_adapt_sockets);
+
 #ifndef CONTAINER_OF
 #define CONTAINER_OF(ptr, type, field)                               \
 		((type *)(((char *)(ptr)) - offsetof(type, field)))
@@ -446,6 +453,21 @@ int nsos_adapt_recvfrom(int fd, void *buf, size_t len, int flags,
 	return ret;
 }
 
+static uint64_t nsos_adapt_poll_time = NSI_NEVER;
+
+void nsos_adapt_poll_add(struct nsos_mid_pollfd *pollfd)
+{
+	sys_dlist_append(&nsos_adapt_sockets, &pollfd->host_node);
+
+	nsos_adapt_poll_time = nsi_hws_get_time() + 1;
+	nsi_hws_find_next_event();
+}
+
+void nsos_adapt_poll_remove(struct nsos_mid_pollfd *pollfd)
+{
+	sys_dlist_remove(&pollfd->host_node);
+}
+
 struct nsos_addrinfo_wrap {
 	struct nsos_mid_addrinfo addrinfo_mid;
 	struct nsos_mid_sockaddr_storage addr_storage;
@@ -595,3 +617,57 @@ int nsos_adapt_fcntl_setfl(int fd, int flags)
 
 	return 0;
 }
+
+static void nsos_adapt_poll_triggered(void)
+{
+	static struct pollfd *nsos_adapt_fds;
+	struct nsos_mid_pollfd *pollfd_mid;
+	struct pollfd *fds;
+	int nfds = sys_dlist_len(&nsos_adapt_sockets);
+	int ret;
+
+	fds = realloc(nsos_adapt_fds, sizeof(*fds) * nfds);
+	if (nfds > 0 && !fds) {
+		nsi_print_warning("error in nsos_adapt realloc()\n");
+		return;
+	}
+
+	nsos_adapt_fds = fds;
+
+	if (nfds == 0) {
+		nsos_adapt_poll_time = NSI_NEVER;
+		nsi_hws_find_next_event();
+		return;
+	}
+
+	nfds = 0;
+	SYS_DLIST_FOR_EACH_CONTAINER(&nsos_adapt_sockets, pollfd_mid, host_node) {
+		fds[nfds].fd = pollfd_mid->fd;
+		fds[nfds].events = pollfd_mid->events;
+		fds[nfds].revents = pollfd_mid->revents;
+		nfds++;
+	}
+
+	ret = poll(fds, nfds, 0);
+	if (ret < 0) {
+		nsi_print_warning("error in nsos_adapt poll(): errno=%d\n", errno);
+
+		nsos_adapt_poll_time = NSI_NEVER;
+		nsi_hws_find_next_event();
+		return;
+	}
+
+	nfds = 0;
+	SYS_DLIST_FOR_EACH_CONTAINER(&nsos_adapt_sockets, pollfd_mid, host_node) {
+		pollfd_mid->revents = fds[nfds].revents;
+		nfds++;
+	}
+
+	if (ret > 0) {
+		hw_irq_ctrl_set_irq(NSOS_IRQ);
+	}
+
+	nsos_adapt_poll_time = nsi_hws_get_time() + 1;
+}
+
+NSI_HW_EVENT(nsos_adapt_poll_time, nsos_adapt_poll_triggered, 500);
diff --git a/drivers/net/nsos_sockets.c b/drivers/net/nsos_sockets.c
index d1b7f85775e..e7366871bf9 100644
--- a/drivers/net/nsos_sockets.c
+++ b/drivers/net/nsos_sockets.c
@@ -12,6 +12,7 @@
 
 #define _POSIX_C_SOURCE 200809
 
+#include <soc.h>
 #include <string.h>
 #include <zephyr/net/ethernet.h>
 #include <zephyr/net/net_ip.h>
@@ -19,6 +20,7 @@
 #include <zephyr/net/socket_offload.h>
 #include <zephyr/posix/fcntl.h>
 #include <zephyr/sys/fdtable.h>
+#include <zephyr/sys/dlist.h>
 
 #include "sockets_internal.h"
 #include "nsos.h"
@@ -28,11 +30,17 @@
 
 #include "nsi_host_trampolines.h"
 
-/* Increment by 1 to make sure we do not store the value of 0, which has
- * a special meaning in the fdtable subsys.
- */
-#define FD_TO_OBJ(fd) ((void *)(intptr_t)((fd) + 1))
-#define OBJ_TO_FD(obj) (((int)(intptr_t)(obj)) - 1)
+BUILD_ASSERT(CONFIG_HEAP_MEM_POOL_SIZE > 0);
+
+#define NSOS_IRQ_FLAGS		(0)
+#define NSOS_IRQ_PRIORITY	(2)
+
+struct nsos_socket {
+	struct nsos_mid_pollfd pollfd;
+	struct k_poll_signal poll;
+};
+
+static sys_dlist_t nsos_sockets = SYS_DLIST_STATIC_INIT(&nsos_sockets);
 
 static int socket_family_to_nsos_mid(int family, int *family_mid)
 {
@@ -131,7 +139,7 @@ static const struct socket_op_vtable nsos_socket_fd_op_vtable;
 static int nsos_socket_create(int family, int type, int proto)
 {
 	int fd;
-	int sock;
+	struct nsos_socket *sock;
 	int family_mid;
 	int type_mid;
 	int proto_mid;
@@ -160,16 +168,25 @@ static int nsos_socket_create(int family, int type, int proto)
 		return -1;
 	}
 
-	sock = nsos_adapt_socket(family_mid, type_mid, proto_mid);
-	if (sock < 0) {
-		errno = errno_from_nsos_mid(-sock);
+	sock = k_malloc(sizeof(*sock));
+	if (!sock) {
+		errno = ENOMEM;
 		goto free_fd;
 	}
 
-	z_finalize_fd(fd, FD_TO_OBJ(sock), &nsos_socket_fd_op_vtable.fd_vtable);
+	sock->pollfd.fd = nsos_adapt_socket(family_mid, type_mid, proto_mid);
+	if (sock->pollfd.fd < 0) {
+		errno = errno_from_nsos_mid(-sock->pollfd.fd);
+		goto free_sock;
+	}
+
+	z_finalize_fd(fd, sock, &nsos_socket_fd_op_vtable.fd_vtable);
 
 	return fd;
 
+free_sock:
+	k_free(sock);
+
 free_fd:
 	z_free_fd(fd);
 
@@ -183,9 +200,10 @@ static int nsos_adapt_get_zephyr_errno(void)
 
 static ssize_t nsos_read(void *obj, void *buf, size_t sz)
 {
+	struct nsos_socket *sock = obj;
 	int ret;
 
-	ret = nsi_host_read(OBJ_TO_FD(obj), buf, sz);
+	ret = nsi_host_read(sock->pollfd.fd, buf, sz);
 	if (ret < 0) {
 		errno = nsos_adapt_get_zephyr_errno();
 	}
@@ -195,9 +213,10 @@ static ssize_t nsos_read(void *obj, void *buf, size_t sz)
 
 static ssize_t nsos_write(void *obj, const void *buf, size_t sz)
 {
+	struct nsos_socket *sock = obj;
 	int ret;
 
-	ret = nsi_host_write(OBJ_TO_FD(obj), buf, sz);
+	ret = nsi_host_write(sock->pollfd.fd, buf, sz);
 	if (ret < 0) {
 		errno = nsos_adapt_get_zephyr_errno();
 	}
@@ -207,9 +226,10 @@ static ssize_t nsos_write(void *obj, const void *buf, size_t sz)
 
 static int nsos_close(void *obj)
 {
+	struct nsos_socket *sock = obj;
 	int ret;
 
-	ret = nsi_host_close(OBJ_TO_FD(obj));
+	ret = nsi_host_close(sock->pollfd.fd);
 	if (ret < 0) {
 		errno = nsos_adapt_get_zephyr_errno();
 	}
@@ -217,14 +237,100 @@ static int nsos_close(void *obj)
 	return ret;
 }
 
+static void pollcb(struct nsos_mid_pollfd *pollfd)
+{
+	struct nsos_socket *sock = CONTAINER_OF(pollfd, struct nsos_socket, pollfd);
+
+	k_poll_signal_raise(&sock->poll, sock->pollfd.revents);
+}
+
+static int nsos_poll_prepare(struct nsos_socket *sock, struct zsock_pollfd *pfd,
+			     struct k_poll_event **pev, struct k_poll_event *pev_end)
+{
+	unsigned int signaled;
+	int flags;
+
+	sock->pollfd.events = pfd->events;
+	sock->pollfd.revents = 0;
+	sock->pollfd.cb = pollcb;
+
+	if (*pev == pev_end) {
+		errno = ENOMEM;
+		return -1;
+	}
+
+	k_poll_signal_init(&sock->poll);
+	k_poll_event_init(*pev, K_POLL_TYPE_SIGNAL, K_POLL_MODE_NOTIFY_ONLY, &sock->poll);
+
+	sys_dlist_append(&nsos_sockets, &sock->pollfd.zephyr_node);
+
+	nsos_adapt_poll_add(&sock->pollfd);
+
+	/* Let other sockets use another k_poll_event */
+	(*pev)++;
+
+	signaled = 0;
+	flags = 0;
+
+	k_poll_signal_check(&sock->poll, &signaled, &flags);
+	if (!signaled) {
+		return 0;
+	}
+
+	/* Events are ready, don't wait */
+	return -EALREADY;
+}
+
+static int nsos_poll_update(struct nsos_socket *sock, struct zsock_pollfd *pfd,
+			    struct k_poll_event **pev)
+{
+	unsigned int signaled;
+	int flags;
+
+	(*pev)++;
+
+	signaled = 0;
+	flags = 0;
+
+	nsos_adapt_poll_remove(&sock->pollfd);
+	sys_dlist_remove(&sock->pollfd.zephyr_node);
+
+	k_poll_signal_check(&sock->poll, &signaled, &flags);
+	if (!signaled) {
+		return 0;
+	}
+
+	pfd->revents = flags;
+
+	return 0;
+}
+
 static int nsos_ioctl(void *obj, unsigned int request, va_list args)
 {
+	struct nsos_socket *sock = obj;
+
 	switch (request) {
-	case ZFD_IOCTL_POLL_PREPARE:
-		return -EXDEV;
+	case ZFD_IOCTL_POLL_PREPARE: {
+		struct zsock_pollfd *pfd;
+		struct k_poll_event **pev;
+		struct k_poll_event *pev_end;
 
-	case ZFD_IOCTL_POLL_UPDATE:
-		return -EOPNOTSUPP;
+		pfd = va_arg(args, struct zsock_pollfd *);
+		pev = va_arg(args, struct k_poll_event **);
+		pev_end = va_arg(args, struct k_poll_event *);
+
+		return nsos_poll_prepare(obj, pfd, pev, pev_end);
+	}
+
+	case ZFD_IOCTL_POLL_UPDATE: {
+		struct zsock_pollfd *pfd;
+		struct k_poll_event **pev;
+
+		pfd = va_arg(args, struct zsock_pollfd *);
+		pev = va_arg(args, struct k_poll_event **);
+
+		return nsos_poll_update(obj, pfd, pev);
+	}
 
 	case ZFD_IOCTL_POLL_OFFLOAD:
 		return -EOPNOTSUPP;
@@ -232,7 +338,7 @@ static int nsos_ioctl(void *obj, unsigned int request, va_list args)
 	case F_GETFL: {
 		int flags;
 
-		flags = nsos_adapt_fcntl_getfl(OBJ_TO_FD(obj));
+		flags = nsos_adapt_fcntl_getfl(sock->pollfd.fd);
 
 		return fl_from_nsos_mid(flags);
 	}
@@ -247,7 +353,7 @@ static int nsos_ioctl(void *obj, unsigned int request, va_list args)
 			return -1;
 		}
 
-		return nsos_adapt_fcntl_setfl(OBJ_TO_FD(obj), flags);
+		return nsos_adapt_fcntl_setfl(sock->pollfd.fd, flags);
 	}
 	}
 
@@ -353,6 +459,7 @@ static int sockaddr_from_nsos_mid(struct sockaddr *addr, socklen_t *addrlen,
 
 static int nsos_bind(void *obj, const struct sockaddr *addr, socklen_t addrlen)
 {
+	struct nsos_socket *sock = obj;
 	struct nsos_mid_sockaddr_storage addr_storage_mid;
 	struct nsos_mid_sockaddr *addr_mid = (struct nsos_mid_sockaddr *)&addr_storage_mid;
 	size_t addrlen_mid;
@@ -363,7 +470,7 @@ static int nsos_bind(void *obj, const struct sockaddr *addr, socklen_t addrlen)
 		goto return_ret;
 	}
 
-	ret = nsos_adapt_bind(OBJ_TO_FD(obj), addr_mid, addrlen_mid);
+	ret = nsos_adapt_bind(sock->pollfd.fd, addr_mid, addrlen_mid);
 
 return_ret:
 	if (ret < 0) {
@@ -376,6 +483,7 @@ return_ret:
 
 static int nsos_connect(void *obj, const struct sockaddr *addr, socklen_t addrlen)
 {
+	struct nsos_socket *sock = obj;
 	struct nsos_mid_sockaddr_storage addr_storage_mid;
 	struct nsos_mid_sockaddr *addr_mid = (struct nsos_mid_sockaddr *)&addr_storage_mid;
 	size_t addrlen_mid;
@@ -386,7 +494,7 @@ static int nsos_connect(void *obj, const struct sockaddr *addr, socklen_t addrle
 		goto return_ret;
 	}
 
-	ret = nsos_adapt_connect(OBJ_TO_FD(obj), addr_mid, addrlen_mid);
+	ret = nsos_adapt_connect(sock->pollfd.fd, addr_mid, addrlen_mid);
 
 return_ret:
 	if (ret < 0) {
@@ -399,9 +507,10 @@ return_ret:
 
 static int nsos_listen(void *obj, int backlog)
 {
+	struct nsos_socket *sock = obj;
 	int ret;
 
-	ret = nsos_adapt_listen(OBJ_TO_FD(obj), backlog);
+	ret = nsos_adapt_listen(sock->pollfd.fd, backlog);
 	if (ret < 0) {
 		errno = errno_from_nsos_mid(-ret);
 		return -1;
@@ -412,12 +521,16 @@ static int nsos_listen(void *obj, int backlog)
 
 static int nsos_accept(void *obj, struct sockaddr *addr, socklen_t *addrlen)
 {
+	struct nsos_socket *accept_sock = obj;
 	struct nsos_mid_sockaddr_storage addr_storage_mid;
 	struct nsos_mid_sockaddr *addr_mid = (struct nsos_mid_sockaddr *)&addr_storage_mid;
 	size_t addrlen_mid = sizeof(addr_storage_mid);
+	int adapt_fd;
+	int zephyr_fd;
+	struct nsos_socket *conn_sock;
 	int ret;
 
-	ret = nsos_adapt_accept(OBJ_TO_FD(obj), addr_mid, &addrlen_mid);
+	ret = nsos_adapt_accept(accept_sock->pollfd.fd, addr_mid, &addrlen_mid);
 	if (ret < 0) {
 		errno = errno_from_nsos_mid(-ret);
 		return -1;
@@ -436,10 +549,21 @@ static int nsos_accept(void *obj, struct sockaddr *addr, socklen_t *addrlen)
 		goto close_adapt_fd;
 	}
 
-	z_finalize_fd(zephyr_fd, FD_TO_OBJ(adapt_fd), &nsos_socket_fd_op_vtable.fd_vtable);
+	conn_sock = k_malloc(sizeof(*conn_sock));
+	if (!conn_sock) {
+		errno = ENOMEM;
+		goto free_zephyr_fd;
+	}
+
+	conn_sock->pollfd.fd = adapt_fd;
+
+	z_finalize_fd(zephyr_fd, conn_sock, &nsos_socket_fd_op_vtable.fd_vtable);
 
 	return zephyr_fd;
 
+free_zephyr_fd:
+	z_free_fd(zephyr_fd);
+
 close_adapt_fd:
 	nsi_host_close(adapt_fd);
 
@@ -449,6 +573,7 @@ close_adapt_fd:
 static ssize_t nsos_sendto(void *obj, const void *buf, size_t len, int flags,
 			   const struct sockaddr *addr, socklen_t addrlen)
 {
+	struct nsos_socket *sock = obj;
 	struct nsos_mid_sockaddr_storage addr_storage_mid;
 	struct nsos_mid_sockaddr *addr_mid = (struct nsos_mid_sockaddr *)&addr_storage_mid;
 	size_t addrlen_mid = sizeof(addr_storage_mid);
@@ -467,7 +592,7 @@ static ssize_t nsos_sendto(void *obj, const void *buf, size_t len, int flags,
 		goto return_ret;
 	}
 
-	ret = nsos_adapt_sendto(OBJ_TO_FD(obj), buf, len, flags_mid,
+	ret = nsos_adapt_sendto(sock->pollfd.fd, buf, len, flags_mid,
 				addr_mid, addrlen_mid);
 
 return_ret:
@@ -488,6 +613,7 @@ static ssize_t nsos_sendmsg(void *obj, const struct msghdr *msg, int flags)
 static ssize_t nsos_recvfrom(void *obj, void *buf, size_t len, int flags,
 			     struct sockaddr *addr, socklen_t *addrlen)
 {
+	struct nsos_socket *sock = obj;
 	struct nsos_mid_sockaddr_storage addr_storage_mid;
 	struct nsos_mid_sockaddr *addr_mid = (struct nsos_mid_sockaddr *)&addr_storage_mid;
 	size_t addrlen_mid = sizeof(addr_storage_mid);
@@ -501,7 +627,7 @@ static ssize_t nsos_recvfrom(void *obj, void *buf, size_t len, int flags,
 
 	flags_mid = ret;
 
-	ret = nsos_adapt_recvfrom(OBJ_TO_FD(obj), buf, len, flags_mid,
+	ret = nsos_adapt_recvfrom(sock->pollfd.fd, buf, len, flags_mid,
 				  addr_mid, &addrlen_mid);
 	if (ret < 0) {
 		goto return_ret;
@@ -686,10 +812,25 @@ static const struct socket_dns_offload nsos_dns_ops = {
 	.freeaddrinfo = nsos_freeaddrinfo,
 };
 
+static void nsos_isr(const void *obj)
+{
+	struct nsos_mid_pollfd *pollfd;
+
+	SYS_DLIST_FOR_EACH_CONTAINER(&nsos_sockets, pollfd, zephyr_node) {
+		if (pollfd->revents) {
+			pollfd->cb(pollfd);
+		}
+	}
+}
+
 static int nsos_socket_offload_init(const struct device *arg)
 {
 	ARG_UNUSED(arg);
 
+	IRQ_CONNECT(NSOS_IRQ, NSOS_IRQ_PRIORITY,
+		    nsos_isr, NULL, NSOS_IRQ_FLAGS);
+	irq_enable(NSOS_IRQ);
+
 	return 0;
 }
 
diff --git a/scripts/native_simulator/native/src/include/nsi_cpu0_interrupts.h b/scripts/native_simulator/native/src/include/nsi_cpu0_interrupts.h
index be2247d1701..1ef9e9e8118 100644
--- a/scripts/native_simulator/native/src/include/nsi_cpu0_interrupts.h
+++ b/scripts/native_simulator/native/src/include/nsi_cpu0_interrupts.h
@@ -9,6 +9,7 @@
 #define TIMER_TICK_IRQ 0
 #define OFFLOAD_SW_IRQ 1
 #define COUNTER_EVENT_IRQ 2
+#define NSOS_IRQ 3
 
 /*
  * This interrupt will awake the CPU if IRQs are not locked,
-- 
2.43.2

